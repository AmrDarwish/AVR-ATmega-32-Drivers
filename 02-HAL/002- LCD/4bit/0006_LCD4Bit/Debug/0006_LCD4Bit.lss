
0006_LCD4Bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000349c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000349c  00003510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000021cc  00000000  00000000  00003518  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001054  00000000  00000000  000056e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00006738  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000aaf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000ac70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000af32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 c1 19 	call	0x3382	; 0x3382 <main>
      7a:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d0 19 	jmp	0x33a0	; 0x33a0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ec 19 	jmp	0x33d8	; 0x33d8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d0 19 	jmp	0x33a0	; 0x33a0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ec 19 	jmp	0x33d8	; 0x33d8 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 e0 19 	jmp	0x33c0	; 0x33c0 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <HLCD_voidInit>:
#include "HLCD_interface.h"
#include "HLCD_private.h"
#include "HLCD_config.h"


void HLCD_voidInit(){
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	c8 59       	subi	r28, 0x98	; 152
     c9c:	d0 40       	sbci	r29, 0x00	; 0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
     ca8:	fe 01       	movw	r30, r28
     caa:	eb 56       	subi	r30, 0x6B	; 107
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	a0 e2       	ldi	r26, 0x20	; 32
     cb4:	b2 e4       	ldi	r27, 0x42	; 66
     cb6:	80 83       	st	Z, r24
     cb8:	91 83       	std	Z+1, r25	; 0x01
     cba:	a2 83       	std	Z+2, r26	; 0x02
     cbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cbe:	8e 01       	movw	r16, r28
     cc0:	0f 56       	subi	r16, 0x6F	; 111
     cc2:	1f 4f       	sbci	r17, 0xFF	; 255
     cc4:	fe 01       	movw	r30, r28
     cc6:	eb 56       	subi	r30, 0x6B	; 107
     cc8:	ff 4f       	sbci	r31, 0xFF	; 255
     cca:	60 81       	ld	r22, Z
     ccc:	71 81       	ldd	r23, Z+1	; 0x01
     cce:	82 81       	ldd	r24, Z+2	; 0x02
     cd0:	93 81       	ldd	r25, Z+3	; 0x03
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	4a ef       	ldi	r20, 0xFA	; 250
     cd8:	54 e4       	ldi	r21, 0x44	; 68
     cda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cde:	dc 01       	movw	r26, r24
     ce0:	cb 01       	movw	r24, r22
     ce2:	f8 01       	movw	r30, r16
     ce4:	80 83       	st	Z, r24
     ce6:	91 83       	std	Z+1, r25	; 0x01
     ce8:	a2 83       	std	Z+2, r26	; 0x02
     cea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cec:	fe 01       	movw	r30, r28
     cee:	ef 56       	subi	r30, 0x6F	; 111
     cf0:	ff 4f       	sbci	r31, 0xFF	; 255
     cf2:	60 81       	ld	r22, Z
     cf4:	71 81       	ldd	r23, Z+1	; 0x01
     cf6:	82 81       	ldd	r24, Z+2	; 0x02
     cf8:	93 81       	ldd	r25, Z+3	; 0x03
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	40 e8       	ldi	r20, 0x80	; 128
     d00:	5f e3       	ldi	r21, 0x3F	; 63
     d02:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     d06:	88 23       	and	r24, r24
     d08:	44 f4       	brge	.+16     	; 0xd1a <HLCD_voidInit+0x8c>
		__ticks = 1;
     d0a:	fe 01       	movw	r30, r28
     d0c:	e1 57       	subi	r30, 0x71	; 113
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	91 83       	std	Z+1, r25	; 0x01
     d16:	80 83       	st	Z, r24
     d18:	64 c0       	rjmp	.+200    	; 0xde2 <HLCD_voidInit+0x154>
	else if (__tmp > 65535)
     d1a:	fe 01       	movw	r30, r28
     d1c:	ef 56       	subi	r30, 0x6F	; 111
     d1e:	ff 4f       	sbci	r31, 0xFF	; 255
     d20:	60 81       	ld	r22, Z
     d22:	71 81       	ldd	r23, Z+1	; 0x01
     d24:	82 81       	ldd	r24, Z+2	; 0x02
     d26:	93 81       	ldd	r25, Z+3	; 0x03
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	3f ef       	ldi	r19, 0xFF	; 255
     d2c:	4f e7       	ldi	r20, 0x7F	; 127
     d2e:	57 e4       	ldi	r21, 0x47	; 71
     d30:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     d34:	18 16       	cp	r1, r24
     d36:	0c f0       	brlt	.+2      	; 0xd3a <HLCD_voidInit+0xac>
     d38:	43 c0       	rjmp	.+134    	; 0xdc0 <HLCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d3a:	fe 01       	movw	r30, r28
     d3c:	eb 56       	subi	r30, 0x6B	; 107
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	60 81       	ld	r22, Z
     d42:	71 81       	ldd	r23, Z+1	; 0x01
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	93 81       	ldd	r25, Z+3	; 0x03
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e2       	ldi	r20, 0x20	; 32
     d4e:	51 e4       	ldi	r21, 0x41	; 65
     d50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	8e 01       	movw	r16, r28
     d5a:	01 57       	subi	r16, 0x71	; 113
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	bc 01       	movw	r22, r24
     d60:	cd 01       	movw	r24, r26
     d62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	f8 01       	movw	r30, r16
     d6c:	91 83       	std	Z+1, r25	; 0x01
     d6e:	80 83       	st	Z, r24
     d70:	1f c0       	rjmp	.+62     	; 0xdb0 <HLCD_voidInit+0x122>
     d72:	fe 01       	movw	r30, r28
     d74:	e3 57       	subi	r30, 0x73	; 115
     d76:	ff 4f       	sbci	r31, 0xFF	; 255
     d78:	88 ec       	ldi	r24, 0xC8	; 200
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	91 83       	std	Z+1, r25	; 0x01
     d7e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d80:	fe 01       	movw	r30, r28
     d82:	e3 57       	subi	r30, 0x73	; 115
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	80 81       	ld	r24, Z
     d88:	91 81       	ldd	r25, Z+1	; 0x01
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <HLCD_voidInit+0xfc>
     d8e:	fe 01       	movw	r30, r28
     d90:	e3 57       	subi	r30, 0x73	; 115
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	91 83       	std	Z+1, r25	; 0x01
     d96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d98:	de 01       	movw	r26, r28
     d9a:	a1 57       	subi	r26, 0x71	; 113
     d9c:	bf 4f       	sbci	r27, 0xFF	; 255
     d9e:	fe 01       	movw	r30, r28
     da0:	e1 57       	subi	r30, 0x71	; 113
     da2:	ff 4f       	sbci	r31, 0xFF	; 255
     da4:	80 81       	ld	r24, Z
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	11 96       	adiw	r26, 0x01	; 1
     dac:	9c 93       	st	X, r25
     dae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db0:	fe 01       	movw	r30, r28
     db2:	e1 57       	subi	r30, 0x71	; 113
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	80 81       	ld	r24, Z
     db8:	91 81       	ldd	r25, Z+1	; 0x01
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	d1 f6       	brne	.-76     	; 0xd72 <HLCD_voidInit+0xe4>
     dbe:	27 c0       	rjmp	.+78     	; 0xe0e <HLCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc0:	8e 01       	movw	r16, r28
     dc2:	01 57       	subi	r16, 0x71	; 113
     dc4:	1f 4f       	sbci	r17, 0xFF	; 255
     dc6:	fe 01       	movw	r30, r28
     dc8:	ef 56       	subi	r30, 0x6F	; 111
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	60 81       	ld	r22, Z
     dce:	71 81       	ldd	r23, Z+1	; 0x01
     dd0:	82 81       	ldd	r24, Z+2	; 0x02
     dd2:	93 81       	ldd	r25, Z+3	; 0x03
     dd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	f8 01       	movw	r30, r16
     dde:	91 83       	std	Z+1, r25	; 0x01
     de0:	80 83       	st	Z, r24
     de2:	de 01       	movw	r26, r28
     de4:	a5 57       	subi	r26, 0x75	; 117
     de6:	bf 4f       	sbci	r27, 0xFF	; 255
     de8:	fe 01       	movw	r30, r28
     dea:	e1 57       	subi	r30, 0x71	; 113
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	80 81       	ld	r24, Z
     df0:	91 81       	ldd	r25, Z+1	; 0x01
     df2:	8d 93       	st	X+, r24
     df4:	9c 93       	st	X, r25
     df6:	fe 01       	movw	r30, r28
     df8:	e5 57       	subi	r30, 0x75	; 117
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	f1 f7       	brne	.-4      	; 0xe00 <HLCD_voidInit+0x172>
     e04:	fe 01       	movw	r30, r28
     e06:	e5 57       	subi	r30, 0x75	; 117
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	91 83       	std	Z+1, r25	; 0x01
     e0c:	80 83       	st	Z, r24
	_delay_ms(40);

	/* manual 4 bit initialization of LCD */
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D0,DIO_HIGH);
     e0e:	84 e0       	ldi	r24, 0x04	; 4
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	41 e0       	ldi	r20, 0x01	; 1
     e14:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D1,DIO_HIGH);
     e18:	84 e0       	ldi	r24, 0x04	; 4
     e1a:	61 e0       	ldi	r22, 0x01	; 1
     e1c:	41 e0       	ldi	r20, 0x01	; 1
     e1e:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D2,DIO_LOW);
     e22:	84 e0       	ldi	r24, 0x04	; 4
     e24:	62 e0       	ldi	r22, 0x02	; 2
     e26:	40 e0       	ldi	r20, 0x00	; 0
     e28:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D3,DIO_LOW);
     e2c:	84 e0       	ldi	r24, 0x04	; 4
     e2e:	63 e0       	ldi	r22, 0x03	; 3
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_LOW); 	/* RS=0, command  */
     e36:	83 e0       	ldi	r24, 0x03	; 3
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW); 	/* RW=0, command Write */
     e40:	83 e0       	ldi	r24, 0x03	; 3
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
     e4a:	83 e0       	ldi	r24, 0x03	; 3
     e4c:	62 e0       	ldi	r22, 0x02	; 2
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
     e54:	fe 01       	movw	r30, r28
     e56:	e9 57       	subi	r30, 0x79	; 121
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	a0 e8       	ldi	r26, 0x80	; 128
     e60:	bf e3       	ldi	r27, 0x3F	; 63
     e62:	80 83       	st	Z, r24
     e64:	91 83       	std	Z+1, r25	; 0x01
     e66:	a2 83       	std	Z+2, r26	; 0x02
     e68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e6a:	8e 01       	movw	r16, r28
     e6c:	0d 57       	subi	r16, 0x7D	; 125
     e6e:	1f 4f       	sbci	r17, 0xFF	; 255
     e70:	fe 01       	movw	r30, r28
     e72:	e9 57       	subi	r30, 0x79	; 121
     e74:	ff 4f       	sbci	r31, 0xFF	; 255
     e76:	60 81       	ld	r22, Z
     e78:	71 81       	ldd	r23, Z+1	; 0x01
     e7a:	82 81       	ldd	r24, Z+2	; 0x02
     e7c:	93 81       	ldd	r25, Z+3	; 0x03
     e7e:	2b ea       	ldi	r18, 0xAB	; 171
     e80:	3a ea       	ldi	r19, 0xAA	; 170
     e82:	4a e2       	ldi	r20, 0x2A	; 42
     e84:	50 e4       	ldi	r21, 0x40	; 64
     e86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	f8 01       	movw	r30, r16
     e90:	80 83       	st	Z, r24
     e92:	91 83       	std	Z+1, r25	; 0x01
     e94:	a2 83       	std	Z+2, r26	; 0x02
     e96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e98:	fe 01       	movw	r30, r28
     e9a:	ed 57       	subi	r30, 0x7D	; 125
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	60 81       	ld	r22, Z
     ea0:	71 81       	ldd	r23, Z+1	; 0x01
     ea2:	82 81       	ldd	r24, Z+2	; 0x02
     ea4:	93 81       	ldd	r25, Z+3	; 0x03
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e8       	ldi	r20, 0x80	; 128
     eac:	5f e3       	ldi	r21, 0x3F	; 63
     eae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     eb2:	88 23       	and	r24, r24
     eb4:	34 f4       	brge	.+12     	; 0xec2 <HLCD_voidInit+0x234>
		__ticks = 1;
     eb6:	fe 01       	movw	r30, r28
     eb8:	ee 57       	subi	r30, 0x7E	; 126
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 83       	st	Z, r24
     ec0:	e0 c0       	rjmp	.+448    	; 0x1082 <HLCD_voidInit+0x3f4>
	else if (__tmp > 255)
     ec2:	fe 01       	movw	r30, r28
     ec4:	ed 57       	subi	r30, 0x7D	; 125
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	60 81       	ld	r22, Z
     eca:	71 81       	ldd	r23, Z+1	; 0x01
     ecc:	82 81       	ldd	r24, Z+2	; 0x02
     ece:	93 81       	ldd	r25, Z+3	; 0x03
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	4f e7       	ldi	r20, 0x7F	; 127
     ed6:	53 e4       	ldi	r21, 0x43	; 67
     ed8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     edc:	18 16       	cp	r1, r24
     ede:	0c f0       	brlt	.+2      	; 0xee2 <HLCD_voidInit+0x254>
     ee0:	c0 c0       	rjmp	.+384    	; 0x1062 <HLCD_voidInit+0x3d4>
	{
		_delay_ms(__us / 1000.0);
     ee2:	fe 01       	movw	r30, r28
     ee4:	e9 57       	subi	r30, 0x79	; 121
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	60 81       	ld	r22, Z
     eea:	71 81       	ldd	r23, Z+1	; 0x01
     eec:	82 81       	ldd	r24, Z+2	; 0x02
     eee:	93 81       	ldd	r25, Z+3	; 0x03
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	4a e7       	ldi	r20, 0x7A	; 122
     ef6:	54 e4       	ldi	r21, 0x44	; 68
     ef8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	fe 01       	movw	r30, r28
     f02:	e2 58       	subi	r30, 0x82	; 130
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	80 83       	st	Z, r24
     f08:	91 83       	std	Z+1, r25	; 0x01
     f0a:	a2 83       	std	Z+2, r26	; 0x02
     f0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f0e:	8e 01       	movw	r16, r28
     f10:	06 58       	subi	r16, 0x86	; 134
     f12:	1f 4f       	sbci	r17, 0xFF	; 255
     f14:	fe 01       	movw	r30, r28
     f16:	e2 58       	subi	r30, 0x82	; 130
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	60 81       	ld	r22, Z
     f1c:	71 81       	ldd	r23, Z+1	; 0x01
     f1e:	82 81       	ldd	r24, Z+2	; 0x02
     f20:	93 81       	ldd	r25, Z+3	; 0x03
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	4a ef       	ldi	r20, 0xFA	; 250
     f28:	54 e4       	ldi	r21, 0x44	; 68
     f2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	f8 01       	movw	r30, r16
     f34:	80 83       	st	Z, r24
     f36:	91 83       	std	Z+1, r25	; 0x01
     f38:	a2 83       	std	Z+2, r26	; 0x02
     f3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f3c:	fe 01       	movw	r30, r28
     f3e:	e6 58       	subi	r30, 0x86	; 134
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	60 81       	ld	r22, Z
     f44:	71 81       	ldd	r23, Z+1	; 0x01
     f46:	82 81       	ldd	r24, Z+2	; 0x02
     f48:	93 81       	ldd	r25, Z+3	; 0x03
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e8       	ldi	r20, 0x80	; 128
     f50:	5f e3       	ldi	r21, 0x3F	; 63
     f52:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f56:	88 23       	and	r24, r24
     f58:	44 f4       	brge	.+16     	; 0xf6a <HLCD_voidInit+0x2dc>
		__ticks = 1;
     f5a:	fe 01       	movw	r30, r28
     f5c:	e8 58       	subi	r30, 0x88	; 136
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	80 83       	st	Z, r24
     f68:	64 c0       	rjmp	.+200    	; 0x1032 <HLCD_voidInit+0x3a4>
	else if (__tmp > 65535)
     f6a:	fe 01       	movw	r30, r28
     f6c:	e6 58       	subi	r30, 0x86	; 134
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	60 81       	ld	r22, Z
     f72:	71 81       	ldd	r23, Z+1	; 0x01
     f74:	82 81       	ldd	r24, Z+2	; 0x02
     f76:	93 81       	ldd	r25, Z+3	; 0x03
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	3f ef       	ldi	r19, 0xFF	; 255
     f7c:	4f e7       	ldi	r20, 0x7F	; 127
     f7e:	57 e4       	ldi	r21, 0x47	; 71
     f80:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f84:	18 16       	cp	r1, r24
     f86:	0c f0       	brlt	.+2      	; 0xf8a <HLCD_voidInit+0x2fc>
     f88:	43 c0       	rjmp	.+134    	; 0x1010 <HLCD_voidInit+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f8a:	fe 01       	movw	r30, r28
     f8c:	e2 58       	subi	r30, 0x82	; 130
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	60 81       	ld	r22, Z
     f92:	71 81       	ldd	r23, Z+1	; 0x01
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e2       	ldi	r20, 0x20	; 32
     f9e:	51 e4       	ldi	r21, 0x41	; 65
     fa0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	8e 01       	movw	r16, r28
     faa:	08 58       	subi	r16, 0x88	; 136
     fac:	1f 4f       	sbci	r17, 0xFF	; 255
     fae:	bc 01       	movw	r22, r24
     fb0:	cd 01       	movw	r24, r26
     fb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	f8 01       	movw	r30, r16
     fbc:	91 83       	std	Z+1, r25	; 0x01
     fbe:	80 83       	st	Z, r24
     fc0:	1f c0       	rjmp	.+62     	; 0x1000 <HLCD_voidInit+0x372>
     fc2:	fe 01       	movw	r30, r28
     fc4:	ea 58       	subi	r30, 0x8A	; 138
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	88 ec       	ldi	r24, 0xC8	; 200
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	91 83       	std	Z+1, r25	; 0x01
     fce:	80 83       	st	Z, r24
     fd0:	fe 01       	movw	r30, r28
     fd2:	ea 58       	subi	r30, 0x8A	; 138
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	80 81       	ld	r24, Z
     fd8:	91 81       	ldd	r25, Z+1	; 0x01
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	f1 f7       	brne	.-4      	; 0xfda <HLCD_voidInit+0x34c>
     fde:	fe 01       	movw	r30, r28
     fe0:	ea 58       	subi	r30, 0x8A	; 138
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	91 83       	std	Z+1, r25	; 0x01
     fe6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe8:	de 01       	movw	r26, r28
     fea:	a8 58       	subi	r26, 0x88	; 136
     fec:	bf 4f       	sbci	r27, 0xFF	; 255
     fee:	fe 01       	movw	r30, r28
     ff0:	e8 58       	subi	r30, 0x88	; 136
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	80 81       	ld	r24, Z
     ff6:	91 81       	ldd	r25, Z+1	; 0x01
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	11 96       	adiw	r26, 0x01	; 1
     ffc:	9c 93       	st	X, r25
     ffe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1000:	fe 01       	movw	r30, r28
    1002:	e8 58       	subi	r30, 0x88	; 136
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	80 81       	ld	r24, Z
    1008:	91 81       	ldd	r25, Z+1	; 0x01
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	d1 f6       	brne	.-76     	; 0xfc2 <HLCD_voidInit+0x334>
    100e:	4b c0       	rjmp	.+150    	; 0x10a6 <HLCD_voidInit+0x418>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1010:	8e 01       	movw	r16, r28
    1012:	08 58       	subi	r16, 0x88	; 136
    1014:	1f 4f       	sbci	r17, 0xFF	; 255
    1016:	fe 01       	movw	r30, r28
    1018:	e6 58       	subi	r30, 0x86	; 134
    101a:	ff 4f       	sbci	r31, 0xFF	; 255
    101c:	60 81       	ld	r22, Z
    101e:	71 81       	ldd	r23, Z+1	; 0x01
    1020:	82 81       	ldd	r24, Z+2	; 0x02
    1022:	93 81       	ldd	r25, Z+3	; 0x03
    1024:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	f8 01       	movw	r30, r16
    102e:	91 83       	std	Z+1, r25	; 0x01
    1030:	80 83       	st	Z, r24
    1032:	de 01       	movw	r26, r28
    1034:	ac 58       	subi	r26, 0x8C	; 140
    1036:	bf 4f       	sbci	r27, 0xFF	; 255
    1038:	fe 01       	movw	r30, r28
    103a:	e8 58       	subi	r30, 0x88	; 136
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	80 81       	ld	r24, Z
    1040:	91 81       	ldd	r25, Z+1	; 0x01
    1042:	11 96       	adiw	r26, 0x01	; 1
    1044:	9c 93       	st	X, r25
    1046:	8e 93       	st	-X, r24
    1048:	fe 01       	movw	r30, r28
    104a:	ec 58       	subi	r30, 0x8C	; 140
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	80 81       	ld	r24, Z
    1050:	91 81       	ldd	r25, Z+1	; 0x01
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	f1 f7       	brne	.-4      	; 0x1052 <HLCD_voidInit+0x3c4>
    1056:	fe 01       	movw	r30, r28
    1058:	ec 58       	subi	r30, 0x8C	; 140
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	91 83       	std	Z+1, r25	; 0x01
    105e:	80 83       	st	Z, r24
    1060:	22 c0       	rjmp	.+68     	; 0x10a6 <HLCD_voidInit+0x418>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1062:	8e 01       	movw	r16, r28
    1064:	0e 57       	subi	r16, 0x7E	; 126
    1066:	1f 4f       	sbci	r17, 0xFF	; 255
    1068:	fe 01       	movw	r30, r28
    106a:	ed 57       	subi	r30, 0x7D	; 125
    106c:	ff 4f       	sbci	r31, 0xFF	; 255
    106e:	60 81       	ld	r22, Z
    1070:	71 81       	ldd	r23, Z+1	; 0x01
    1072:	82 81       	ldd	r24, Z+2	; 0x02
    1074:	93 81       	ldd	r25, Z+3	; 0x03
    1076:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	f8 01       	movw	r30, r16
    1080:	80 83       	st	Z, r24
    1082:	de 01       	movw	r26, r28
    1084:	ad 58       	subi	r26, 0x8D	; 141
    1086:	bf 4f       	sbci	r27, 0xFF	; 255
    1088:	fe 01       	movw	r30, r28
    108a:	ee 57       	subi	r30, 0x7E	; 126
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	80 81       	ld	r24, Z
    1090:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1092:	fe 01       	movw	r30, r28
    1094:	ed 58       	subi	r30, 0x8D	; 141
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	80 81       	ld	r24, Z
    109a:	8a 95       	dec	r24
    109c:	f1 f7       	brne	.-4      	; 0x109a <HLCD_voidInit+0x40c>
    109e:	fe 01       	movw	r30, r28
    10a0:	ed 58       	subi	r30, 0x8D	; 141
    10a2:	ff 4f       	sbci	r31, 0xFF	; 255
    10a4:	80 83       	st	Z, r24
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    10a6:	83 e0       	ldi	r24, 0x03	; 3
    10a8:	62 e0       	ldi	r22, 0x02	; 2
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
    10b0:	fe 01       	movw	r30, r28
    10b2:	e1 59       	subi	r30, 0x91	; 145
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	a0 ea       	ldi	r26, 0xA0	; 160
    10bc:	b0 e4       	ldi	r27, 0x40	; 64
    10be:	80 83       	st	Z, r24
    10c0:	91 83       	std	Z+1, r25	; 0x01
    10c2:	a2 83       	std	Z+2, r26	; 0x02
    10c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c6:	8e 01       	movw	r16, r28
    10c8:	05 59       	subi	r16, 0x95	; 149
    10ca:	1f 4f       	sbci	r17, 0xFF	; 255
    10cc:	fe 01       	movw	r30, r28
    10ce:	e1 59       	subi	r30, 0x91	; 145
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	60 81       	ld	r22, Z
    10d4:	71 81       	ldd	r23, Z+1	; 0x01
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	4a ef       	ldi	r20, 0xFA	; 250
    10e0:	54 e4       	ldi	r21, 0x44	; 68
    10e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	f8 01       	movw	r30, r16
    10ec:	80 83       	st	Z, r24
    10ee:	91 83       	std	Z+1, r25	; 0x01
    10f0:	a2 83       	std	Z+2, r26	; 0x02
    10f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10f4:	fe 01       	movw	r30, r28
    10f6:	e5 59       	subi	r30, 0x95	; 149
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	60 81       	ld	r22, Z
    10fc:	71 81       	ldd	r23, Z+1	; 0x01
    10fe:	82 81       	ldd	r24, Z+2	; 0x02
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e8       	ldi	r20, 0x80	; 128
    1108:	5f e3       	ldi	r21, 0x3F	; 63
    110a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    110e:	88 23       	and	r24, r24
    1110:	44 f4       	brge	.+16     	; 0x1122 <HLCD_voidInit+0x494>
		__ticks = 1;
    1112:	fe 01       	movw	r30, r28
    1114:	e7 59       	subi	r30, 0x97	; 151
    1116:	ff 4f       	sbci	r31, 0xFF	; 255
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	91 83       	std	Z+1, r25	; 0x01
    111e:	80 83       	st	Z, r24
    1120:	64 c0       	rjmp	.+200    	; 0x11ea <HLCD_voidInit+0x55c>
	else if (__tmp > 65535)
    1122:	fe 01       	movw	r30, r28
    1124:	e5 59       	subi	r30, 0x95	; 149
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	60 81       	ld	r22, Z
    112a:	71 81       	ldd	r23, Z+1	; 0x01
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	93 81       	ldd	r25, Z+3	; 0x03
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	3f ef       	ldi	r19, 0xFF	; 255
    1134:	4f e7       	ldi	r20, 0x7F	; 127
    1136:	57 e4       	ldi	r21, 0x47	; 71
    1138:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    113c:	18 16       	cp	r1, r24
    113e:	0c f0       	brlt	.+2      	; 0x1142 <HLCD_voidInit+0x4b4>
    1140:	43 c0       	rjmp	.+134    	; 0x11c8 <HLCD_voidInit+0x53a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1142:	fe 01       	movw	r30, r28
    1144:	e1 59       	subi	r30, 0x91	; 145
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	60 81       	ld	r22, Z
    114a:	71 81       	ldd	r23, Z+1	; 0x01
    114c:	82 81       	ldd	r24, Z+2	; 0x02
    114e:	93 81       	ldd	r25, Z+3	; 0x03
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e2       	ldi	r20, 0x20	; 32
    1156:	51 e4       	ldi	r21, 0x41	; 65
    1158:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	8e 01       	movw	r16, r28
    1162:	07 59       	subi	r16, 0x97	; 151
    1164:	1f 4f       	sbci	r17, 0xFF	; 255
    1166:	bc 01       	movw	r22, r24
    1168:	cd 01       	movw	r24, r26
    116a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	f8 01       	movw	r30, r16
    1174:	91 83       	std	Z+1, r25	; 0x01
    1176:	80 83       	st	Z, r24
    1178:	1f c0       	rjmp	.+62     	; 0x11b8 <HLCD_voidInit+0x52a>
    117a:	fe 01       	movw	r30, r28
    117c:	e9 59       	subi	r30, 0x99	; 153
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	88 ec       	ldi	r24, 0xC8	; 200
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	91 83       	std	Z+1, r25	; 0x01
    1186:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1188:	fe 01       	movw	r30, r28
    118a:	e9 59       	subi	r30, 0x99	; 153
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	80 81       	ld	r24, Z
    1190:	91 81       	ldd	r25, Z+1	; 0x01
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	f1 f7       	brne	.-4      	; 0x1192 <HLCD_voidInit+0x504>
    1196:	fe 01       	movw	r30, r28
    1198:	e9 59       	subi	r30, 0x99	; 153
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	91 83       	std	Z+1, r25	; 0x01
    119e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a0:	de 01       	movw	r26, r28
    11a2:	a7 59       	subi	r26, 0x97	; 151
    11a4:	bf 4f       	sbci	r27, 0xFF	; 255
    11a6:	fe 01       	movw	r30, r28
    11a8:	e7 59       	subi	r30, 0x97	; 151
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	80 81       	ld	r24, Z
    11ae:	91 81       	ldd	r25, Z+1	; 0x01
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	11 96       	adiw	r26, 0x01	; 1
    11b4:	9c 93       	st	X, r25
    11b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b8:	fe 01       	movw	r30, r28
    11ba:	e7 59       	subi	r30, 0x97	; 151
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	80 81       	ld	r24, Z
    11c0:	91 81       	ldd	r25, Z+1	; 0x01
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	d1 f6       	brne	.-76     	; 0x117a <HLCD_voidInit+0x4ec>
    11c6:	27 c0       	rjmp	.+78     	; 0x1216 <HLCD_voidInit+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c8:	8e 01       	movw	r16, r28
    11ca:	07 59       	subi	r16, 0x97	; 151
    11cc:	1f 4f       	sbci	r17, 0xFF	; 255
    11ce:	fe 01       	movw	r30, r28
    11d0:	e5 59       	subi	r30, 0x95	; 149
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	60 81       	ld	r22, Z
    11d6:	71 81       	ldd	r23, Z+1	; 0x01
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	f8 01       	movw	r30, r16
    11e6:	91 83       	std	Z+1, r25	; 0x01
    11e8:	80 83       	st	Z, r24
    11ea:	de 01       	movw	r26, r28
    11ec:	ab 59       	subi	r26, 0x9B	; 155
    11ee:	bf 4f       	sbci	r27, 0xFF	; 255
    11f0:	fe 01       	movw	r30, r28
    11f2:	e7 59       	subi	r30, 0x97	; 151
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	80 81       	ld	r24, Z
    11f8:	91 81       	ldd	r25, Z+1	; 0x01
    11fa:	8d 93       	st	X+, r24
    11fc:	9c 93       	st	X, r25
    11fe:	fe 01       	movw	r30, r28
    1200:	eb 59       	subi	r30, 0x9B	; 155
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	80 81       	ld	r24, Z
    1206:	91 81       	ldd	r25, Z+1	; 0x01
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	f1 f7       	brne	.-4      	; 0x1208 <HLCD_voidInit+0x57a>
    120c:	fe 01       	movw	r30, r28
    120e:	eb 59       	subi	r30, 0x9B	; 155
    1210:	ff 4f       	sbci	r31, 0xFF	; 255
    1212:	91 83       	std	Z+1, r25	; 0x01
    1214:	80 83       	st	Z, r24

	_delay_ms(5); /* min 4.1ms */

	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D0,DIO_HIGH);
    1216:	84 e0       	ldi	r24, 0x04	; 4
    1218:	60 e0       	ldi	r22, 0x00	; 0
    121a:	41 e0       	ldi	r20, 0x01	; 1
    121c:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D1,DIO_HIGH);
    1220:	84 e0       	ldi	r24, 0x04	; 4
    1222:	61 e0       	ldi	r22, 0x01	; 1
    1224:	41 e0       	ldi	r20, 0x01	; 1
    1226:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D2,DIO_LOW);
    122a:	84 e0       	ldi	r24, 0x04	; 4
    122c:	62 e0       	ldi	r22, 0x02	; 2
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D3,DIO_LOW);
    1234:	84 e0       	ldi	r24, 0x04	; 4
    1236:	63 e0       	ldi	r22, 0x03	; 3
    1238:	40 e0       	ldi	r20, 0x00	; 0
    123a:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_LOW); 	/* RS=0, command  */
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW); 	/* RW=0, command Write */
    1248:	83 e0       	ldi	r24, 0x03	; 3
    124a:	61 e0       	ldi	r22, 0x01	; 1
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    1252:	83 e0       	ldi	r24, 0x03	; 3
    1254:	62 e0       	ldi	r22, 0x02	; 2
    1256:	41 e0       	ldi	r20, 0x01	; 1
    1258:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
    125c:	fe 01       	movw	r30, r28
    125e:	ef 59       	subi	r30, 0x9F	; 159
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	a0 e8       	ldi	r26, 0x80	; 128
    1268:	bf e3       	ldi	r27, 0x3F	; 63
    126a:	80 83       	st	Z, r24
    126c:	91 83       	std	Z+1, r25	; 0x01
    126e:	a2 83       	std	Z+2, r26	; 0x02
    1270:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1272:	8e 01       	movw	r16, r28
    1274:	03 5a       	subi	r16, 0xA3	; 163
    1276:	1f 4f       	sbci	r17, 0xFF	; 255
    1278:	fe 01       	movw	r30, r28
    127a:	ef 59       	subi	r30, 0x9F	; 159
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	60 81       	ld	r22, Z
    1280:	71 81       	ldd	r23, Z+1	; 0x01
    1282:	82 81       	ldd	r24, Z+2	; 0x02
    1284:	93 81       	ldd	r25, Z+3	; 0x03
    1286:	2b ea       	ldi	r18, 0xAB	; 171
    1288:	3a ea       	ldi	r19, 0xAA	; 170
    128a:	4a e2       	ldi	r20, 0x2A	; 42
    128c:	50 e4       	ldi	r21, 0x40	; 64
    128e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1292:	dc 01       	movw	r26, r24
    1294:	cb 01       	movw	r24, r22
    1296:	f8 01       	movw	r30, r16
    1298:	80 83       	st	Z, r24
    129a:	91 83       	std	Z+1, r25	; 0x01
    129c:	a2 83       	std	Z+2, r26	; 0x02
    129e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12a0:	fe 01       	movw	r30, r28
    12a2:	e3 5a       	subi	r30, 0xA3	; 163
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
    12a6:	60 81       	ld	r22, Z
    12a8:	71 81       	ldd	r23, Z+1	; 0x01
    12aa:	82 81       	ldd	r24, Z+2	; 0x02
    12ac:	93 81       	ldd	r25, Z+3	; 0x03
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e8       	ldi	r20, 0x80	; 128
    12b4:	5f e3       	ldi	r21, 0x3F	; 63
    12b6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    12ba:	88 23       	and	r24, r24
    12bc:	34 f4       	brge	.+12     	; 0x12ca <HLCD_voidInit+0x63c>
		__ticks = 1;
    12be:	fe 01       	movw	r30, r28
    12c0:	e4 5a       	subi	r30, 0xA4	; 164
    12c2:	ff 4f       	sbci	r31, 0xFF	; 255
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	80 83       	st	Z, r24
    12c8:	e0 c0       	rjmp	.+448    	; 0x148a <HLCD_voidInit+0x7fc>
	else if (__tmp > 255)
    12ca:	fe 01       	movw	r30, r28
    12cc:	e3 5a       	subi	r30, 0xA3	; 163
    12ce:	ff 4f       	sbci	r31, 0xFF	; 255
    12d0:	60 81       	ld	r22, Z
    12d2:	71 81       	ldd	r23, Z+1	; 0x01
    12d4:	82 81       	ldd	r24, Z+2	; 0x02
    12d6:	93 81       	ldd	r25, Z+3	; 0x03
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	4f e7       	ldi	r20, 0x7F	; 127
    12de:	53 e4       	ldi	r21, 0x43	; 67
    12e0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12e4:	18 16       	cp	r1, r24
    12e6:	0c f0       	brlt	.+2      	; 0x12ea <HLCD_voidInit+0x65c>
    12e8:	c0 c0       	rjmp	.+384    	; 0x146a <HLCD_voidInit+0x7dc>
	{
		_delay_ms(__us / 1000.0);
    12ea:	fe 01       	movw	r30, r28
    12ec:	ef 59       	subi	r30, 0x9F	; 159
    12ee:	ff 4f       	sbci	r31, 0xFF	; 255
    12f0:	60 81       	ld	r22, Z
    12f2:	71 81       	ldd	r23, Z+1	; 0x01
    12f4:	82 81       	ldd	r24, Z+2	; 0x02
    12f6:	93 81       	ldd	r25, Z+3	; 0x03
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	4a e7       	ldi	r20, 0x7A	; 122
    12fe:	54 e4       	ldi	r21, 0x44	; 68
    1300:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	fe 01       	movw	r30, r28
    130a:	e8 5a       	subi	r30, 0xA8	; 168
    130c:	ff 4f       	sbci	r31, 0xFF	; 255
    130e:	80 83       	st	Z, r24
    1310:	91 83       	std	Z+1, r25	; 0x01
    1312:	a2 83       	std	Z+2, r26	; 0x02
    1314:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1316:	8e 01       	movw	r16, r28
    1318:	0c 5a       	subi	r16, 0xAC	; 172
    131a:	1f 4f       	sbci	r17, 0xFF	; 255
    131c:	fe 01       	movw	r30, r28
    131e:	e8 5a       	subi	r30, 0xA8	; 168
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	60 81       	ld	r22, Z
    1324:	71 81       	ldd	r23, Z+1	; 0x01
    1326:	82 81       	ldd	r24, Z+2	; 0x02
    1328:	93 81       	ldd	r25, Z+3	; 0x03
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	4a ef       	ldi	r20, 0xFA	; 250
    1330:	54 e4       	ldi	r21, 0x44	; 68
    1332:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	f8 01       	movw	r30, r16
    133c:	80 83       	st	Z, r24
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	a2 83       	std	Z+2, r26	; 0x02
    1342:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1344:	fe 01       	movw	r30, r28
    1346:	ec 5a       	subi	r30, 0xAC	; 172
    1348:	ff 4f       	sbci	r31, 0xFF	; 255
    134a:	60 81       	ld	r22, Z
    134c:	71 81       	ldd	r23, Z+1	; 0x01
    134e:	82 81       	ldd	r24, Z+2	; 0x02
    1350:	93 81       	ldd	r25, Z+3	; 0x03
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e8       	ldi	r20, 0x80	; 128
    1358:	5f e3       	ldi	r21, 0x3F	; 63
    135a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    135e:	88 23       	and	r24, r24
    1360:	44 f4       	brge	.+16     	; 0x1372 <HLCD_voidInit+0x6e4>
		__ticks = 1;
    1362:	fe 01       	movw	r30, r28
    1364:	ee 5a       	subi	r30, 0xAE	; 174
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	91 83       	std	Z+1, r25	; 0x01
    136e:	80 83       	st	Z, r24
    1370:	64 c0       	rjmp	.+200    	; 0x143a <HLCD_voidInit+0x7ac>
	else if (__tmp > 65535)
    1372:	fe 01       	movw	r30, r28
    1374:	ec 5a       	subi	r30, 0xAC	; 172
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	60 81       	ld	r22, Z
    137a:	71 81       	ldd	r23, Z+1	; 0x01
    137c:	82 81       	ldd	r24, Z+2	; 0x02
    137e:	93 81       	ldd	r25, Z+3	; 0x03
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	3f ef       	ldi	r19, 0xFF	; 255
    1384:	4f e7       	ldi	r20, 0x7F	; 127
    1386:	57 e4       	ldi	r21, 0x47	; 71
    1388:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    138c:	18 16       	cp	r1, r24
    138e:	0c f0       	brlt	.+2      	; 0x1392 <HLCD_voidInit+0x704>
    1390:	43 c0       	rjmp	.+134    	; 0x1418 <HLCD_voidInit+0x78a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1392:	fe 01       	movw	r30, r28
    1394:	e8 5a       	subi	r30, 0xA8	; 168
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	60 81       	ld	r22, Z
    139a:	71 81       	ldd	r23, Z+1	; 0x01
    139c:	82 81       	ldd	r24, Z+2	; 0x02
    139e:	93 81       	ldd	r25, Z+3	; 0x03
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e2       	ldi	r20, 0x20	; 32
    13a6:	51 e4       	ldi	r21, 0x41	; 65
    13a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	8e 01       	movw	r16, r28
    13b2:	0e 5a       	subi	r16, 0xAE	; 174
    13b4:	1f 4f       	sbci	r17, 0xFF	; 255
    13b6:	bc 01       	movw	r22, r24
    13b8:	cd 01       	movw	r24, r26
    13ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	f8 01       	movw	r30, r16
    13c4:	91 83       	std	Z+1, r25	; 0x01
    13c6:	80 83       	st	Z, r24
    13c8:	1f c0       	rjmp	.+62     	; 0x1408 <HLCD_voidInit+0x77a>
    13ca:	fe 01       	movw	r30, r28
    13cc:	e0 5b       	subi	r30, 0xB0	; 176
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	88 ec       	ldi	r24, 0xC8	; 200
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	91 83       	std	Z+1, r25	; 0x01
    13d6:	80 83       	st	Z, r24
    13d8:	fe 01       	movw	r30, r28
    13da:	e0 5b       	subi	r30, 0xB0	; 176
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	80 81       	ld	r24, Z
    13e0:	91 81       	ldd	r25, Z+1	; 0x01
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <HLCD_voidInit+0x754>
    13e6:	fe 01       	movw	r30, r28
    13e8:	e0 5b       	subi	r30, 0xB0	; 176
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	91 83       	std	Z+1, r25	; 0x01
    13ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f0:	de 01       	movw	r26, r28
    13f2:	ae 5a       	subi	r26, 0xAE	; 174
    13f4:	bf 4f       	sbci	r27, 0xFF	; 255
    13f6:	fe 01       	movw	r30, r28
    13f8:	ee 5a       	subi	r30, 0xAE	; 174
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	80 81       	ld	r24, Z
    13fe:	91 81       	ldd	r25, Z+1	; 0x01
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	11 96       	adiw	r26, 0x01	; 1
    1404:	9c 93       	st	X, r25
    1406:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1408:	fe 01       	movw	r30, r28
    140a:	ee 5a       	subi	r30, 0xAE	; 174
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	80 81       	ld	r24, Z
    1410:	91 81       	ldd	r25, Z+1	; 0x01
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	d1 f6       	brne	.-76     	; 0x13ca <HLCD_voidInit+0x73c>
    1416:	4b c0       	rjmp	.+150    	; 0x14ae <HLCD_voidInit+0x820>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1418:	8e 01       	movw	r16, r28
    141a:	0e 5a       	subi	r16, 0xAE	; 174
    141c:	1f 4f       	sbci	r17, 0xFF	; 255
    141e:	fe 01       	movw	r30, r28
    1420:	ec 5a       	subi	r30, 0xAC	; 172
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	60 81       	ld	r22, Z
    1426:	71 81       	ldd	r23, Z+1	; 0x01
    1428:	82 81       	ldd	r24, Z+2	; 0x02
    142a:	93 81       	ldd	r25, Z+3	; 0x03
    142c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	f8 01       	movw	r30, r16
    1436:	91 83       	std	Z+1, r25	; 0x01
    1438:	80 83       	st	Z, r24
    143a:	de 01       	movw	r26, r28
    143c:	a2 5b       	subi	r26, 0xB2	; 178
    143e:	bf 4f       	sbci	r27, 0xFF	; 255
    1440:	fe 01       	movw	r30, r28
    1442:	ee 5a       	subi	r30, 0xAE	; 174
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	80 81       	ld	r24, Z
    1448:	91 81       	ldd	r25, Z+1	; 0x01
    144a:	11 96       	adiw	r26, 0x01	; 1
    144c:	9c 93       	st	X, r25
    144e:	8e 93       	st	-X, r24
    1450:	fe 01       	movw	r30, r28
    1452:	e2 5b       	subi	r30, 0xB2	; 178
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	80 81       	ld	r24, Z
    1458:	91 81       	ldd	r25, Z+1	; 0x01
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <HLCD_voidInit+0x7cc>
    145e:	fe 01       	movw	r30, r28
    1460:	e2 5b       	subi	r30, 0xB2	; 178
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	91 83       	std	Z+1, r25	; 0x01
    1466:	80 83       	st	Z, r24
    1468:	22 c0       	rjmp	.+68     	; 0x14ae <HLCD_voidInit+0x820>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    146a:	8e 01       	movw	r16, r28
    146c:	04 5a       	subi	r16, 0xA4	; 164
    146e:	1f 4f       	sbci	r17, 0xFF	; 255
    1470:	fe 01       	movw	r30, r28
    1472:	e3 5a       	subi	r30, 0xA3	; 163
    1474:	ff 4f       	sbci	r31, 0xFF	; 255
    1476:	60 81       	ld	r22, Z
    1478:	71 81       	ldd	r23, Z+1	; 0x01
    147a:	82 81       	ldd	r24, Z+2	; 0x02
    147c:	93 81       	ldd	r25, Z+3	; 0x03
    147e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	f8 01       	movw	r30, r16
    1488:	80 83       	st	Z, r24
    148a:	de 01       	movw	r26, r28
    148c:	a3 5b       	subi	r26, 0xB3	; 179
    148e:	bf 4f       	sbci	r27, 0xFF	; 255
    1490:	fe 01       	movw	r30, r28
    1492:	e4 5a       	subi	r30, 0xA4	; 164
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	80 81       	ld	r24, Z
    1498:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    149a:	fe 01       	movw	r30, r28
    149c:	e3 5b       	subi	r30, 0xB3	; 179
    149e:	ff 4f       	sbci	r31, 0xFF	; 255
    14a0:	80 81       	ld	r24, Z
    14a2:	8a 95       	dec	r24
    14a4:	f1 f7       	brne	.-4      	; 0x14a2 <HLCD_voidInit+0x814>
    14a6:	fe 01       	movw	r30, r28
    14a8:	e3 5b       	subi	r30, 0xB3	; 179
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	80 83       	st	Z, r24
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    14ae:	83 e0       	ldi	r24, 0x03	; 3
    14b0:	62 e0       	ldi	r22, 0x02	; 2
    14b2:	40 e0       	ldi	r20, 0x00	; 0
    14b4:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
    14b8:	fe 01       	movw	r30, r28
    14ba:	e7 5b       	subi	r30, 0xB7	; 183
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	a0 e8       	ldi	r26, 0x80	; 128
    14c4:	bf e3       	ldi	r27, 0x3F	; 63
    14c6:	80 83       	st	Z, r24
    14c8:	91 83       	std	Z+1, r25	; 0x01
    14ca:	a2 83       	std	Z+2, r26	; 0x02
    14cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ce:	8e 01       	movw	r16, r28
    14d0:	0b 5b       	subi	r16, 0xBB	; 187
    14d2:	1f 4f       	sbci	r17, 0xFF	; 255
    14d4:	fe 01       	movw	r30, r28
    14d6:	e7 5b       	subi	r30, 0xB7	; 183
    14d8:	ff 4f       	sbci	r31, 0xFF	; 255
    14da:	60 81       	ld	r22, Z
    14dc:	71 81       	ldd	r23, Z+1	; 0x01
    14de:	82 81       	ldd	r24, Z+2	; 0x02
    14e0:	93 81       	ldd	r25, Z+3	; 0x03
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	4a ef       	ldi	r20, 0xFA	; 250
    14e8:	54 e4       	ldi	r21, 0x44	; 68
    14ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	f8 01       	movw	r30, r16
    14f4:	80 83       	st	Z, r24
    14f6:	91 83       	std	Z+1, r25	; 0x01
    14f8:	a2 83       	std	Z+2, r26	; 0x02
    14fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14fc:	fe 01       	movw	r30, r28
    14fe:	eb 5b       	subi	r30, 0xBB	; 187
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	60 81       	ld	r22, Z
    1504:	71 81       	ldd	r23, Z+1	; 0x01
    1506:	82 81       	ldd	r24, Z+2	; 0x02
    1508:	93 81       	ldd	r25, Z+3	; 0x03
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	40 e8       	ldi	r20, 0x80	; 128
    1510:	5f e3       	ldi	r21, 0x3F	; 63
    1512:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1516:	88 23       	and	r24, r24
    1518:	44 f4       	brge	.+16     	; 0x152a <HLCD_voidInit+0x89c>
		__ticks = 1;
    151a:	fe 01       	movw	r30, r28
    151c:	ed 5b       	subi	r30, 0xBD	; 189
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	91 83       	std	Z+1, r25	; 0x01
    1526:	80 83       	st	Z, r24
    1528:	64 c0       	rjmp	.+200    	; 0x15f2 <HLCD_voidInit+0x964>
	else if (__tmp > 65535)
    152a:	fe 01       	movw	r30, r28
    152c:	eb 5b       	subi	r30, 0xBB	; 187
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	60 81       	ld	r22, Z
    1532:	71 81       	ldd	r23, Z+1	; 0x01
    1534:	82 81       	ldd	r24, Z+2	; 0x02
    1536:	93 81       	ldd	r25, Z+3	; 0x03
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	3f ef       	ldi	r19, 0xFF	; 255
    153c:	4f e7       	ldi	r20, 0x7F	; 127
    153e:	57 e4       	ldi	r21, 0x47	; 71
    1540:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1544:	18 16       	cp	r1, r24
    1546:	0c f0       	brlt	.+2      	; 0x154a <HLCD_voidInit+0x8bc>
    1548:	43 c0       	rjmp	.+134    	; 0x15d0 <HLCD_voidInit+0x942>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154a:	fe 01       	movw	r30, r28
    154c:	e7 5b       	subi	r30, 0xB7	; 183
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e2       	ldi	r20, 0x20	; 32
    155e:	51 e4       	ldi	r21, 0x41	; 65
    1560:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	8e 01       	movw	r16, r28
    156a:	0d 5b       	subi	r16, 0xBD	; 189
    156c:	1f 4f       	sbci	r17, 0xFF	; 255
    156e:	bc 01       	movw	r22, r24
    1570:	cd 01       	movw	r24, r26
    1572:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	f8 01       	movw	r30, r16
    157c:	91 83       	std	Z+1, r25	; 0x01
    157e:	80 83       	st	Z, r24
    1580:	1f c0       	rjmp	.+62     	; 0x15c0 <HLCD_voidInit+0x932>
    1582:	fe 01       	movw	r30, r28
    1584:	ef 5b       	subi	r30, 0xBF	; 191
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	88 ec       	ldi	r24, 0xC8	; 200
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	91 83       	std	Z+1, r25	; 0x01
    158e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1590:	fe 01       	movw	r30, r28
    1592:	ef 5b       	subi	r30, 0xBF	; 191
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	80 81       	ld	r24, Z
    1598:	91 81       	ldd	r25, Z+1	; 0x01
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	f1 f7       	brne	.-4      	; 0x159a <HLCD_voidInit+0x90c>
    159e:	fe 01       	movw	r30, r28
    15a0:	ef 5b       	subi	r30, 0xBF	; 191
    15a2:	ff 4f       	sbci	r31, 0xFF	; 255
    15a4:	91 83       	std	Z+1, r25	; 0x01
    15a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a8:	de 01       	movw	r26, r28
    15aa:	ad 5b       	subi	r26, 0xBD	; 189
    15ac:	bf 4f       	sbci	r27, 0xFF	; 255
    15ae:	fe 01       	movw	r30, r28
    15b0:	ed 5b       	subi	r30, 0xBD	; 189
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	80 81       	ld	r24, Z
    15b6:	91 81       	ldd	r25, Z+1	; 0x01
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	11 96       	adiw	r26, 0x01	; 1
    15bc:	9c 93       	st	X, r25
    15be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c0:	fe 01       	movw	r30, r28
    15c2:	ed 5b       	subi	r30, 0xBD	; 189
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	80 81       	ld	r24, Z
    15c8:	91 81       	ldd	r25, Z+1	; 0x01
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	d1 f6       	brne	.-76     	; 0x1582 <HLCD_voidInit+0x8f4>
    15ce:	24 c0       	rjmp	.+72     	; 0x1618 <HLCD_voidInit+0x98a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d0:	8e 01       	movw	r16, r28
    15d2:	0d 5b       	subi	r16, 0xBD	; 189
    15d4:	1f 4f       	sbci	r17, 0xFF	; 255
    15d6:	fe 01       	movw	r30, r28
    15d8:	eb 5b       	subi	r30, 0xBB	; 187
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	60 81       	ld	r22, Z
    15de:	71 81       	ldd	r23, Z+1	; 0x01
    15e0:	82 81       	ldd	r24, Z+2	; 0x02
    15e2:	93 81       	ldd	r25, Z+3	; 0x03
    15e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	f8 01       	movw	r30, r16
    15ee:	91 83       	std	Z+1, r25	; 0x01
    15f0:	80 83       	st	Z, r24
    15f2:	fe 01       	movw	r30, r28
    15f4:	ed 5b       	subi	r30, 0xBD	; 189
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	80 81       	ld	r24, Z
    15fa:	91 81       	ldd	r25, Z+1	; 0x01
    15fc:	fe 01       	movw	r30, r28
    15fe:	ff 96       	adiw	r30, 0x3f	; 63
    1600:	91 83       	std	Z+1, r25	; 0x01
    1602:	80 83       	st	Z, r24
    1604:	fe 01       	movw	r30, r28
    1606:	ff 96       	adiw	r30, 0x3f	; 63
    1608:	80 81       	ld	r24, Z
    160a:	91 81       	ldd	r25, Z+1	; 0x01
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <HLCD_voidInit+0x97e>
    1610:	fe 01       	movw	r30, r28
    1612:	ff 96       	adiw	r30, 0x3f	; 63
    1614:	91 83       	std	Z+1, r25	; 0x01
    1616:	80 83       	st	Z, r24

	_delay_ms(1);

	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D0,DIO_HIGH);
    1618:	84 e0       	ldi	r24, 0x04	; 4
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	41 e0       	ldi	r20, 0x01	; 1
    161e:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D1,DIO_HIGH);
    1622:	84 e0       	ldi	r24, 0x04	; 4
    1624:	61 e0       	ldi	r22, 0x01	; 1
    1626:	41 e0       	ldi	r20, 0x01	; 1
    1628:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D2,DIO_LOW);
    162c:	84 e0       	ldi	r24, 0x04	; 4
    162e:	62 e0       	ldi	r22, 0x02	; 2
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D3,DIO_LOW);
    1636:	84 e0       	ldi	r24, 0x04	; 4
    1638:	63 e0       	ldi	r22, 0x03	; 3
    163a:	40 e0       	ldi	r20, 0x00	; 0
    163c:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_LOW); 	/* RS=0, command  */
    1640:	83 e0       	ldi	r24, 0x03	; 3
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW); 	/* RW=0, command Write */
    164a:	83 e0       	ldi	r24, 0x03	; 3
    164c:	61 e0       	ldi	r22, 0x01	; 1
    164e:	40 e0       	ldi	r20, 0x00	; 0
    1650:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    1654:	83 e0       	ldi	r24, 0x03	; 3
    1656:	62 e0       	ldi	r22, 0x02	; 2
    1658:	41 e0       	ldi	r20, 0x01	; 1
    165a:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	a0 e8       	ldi	r26, 0x80	; 128
    1664:	bf e3       	ldi	r27, 0x3F	; 63
    1666:	8b af       	std	Y+59, r24	; 0x3b
    1668:	9c af       	std	Y+60, r25	; 0x3c
    166a:	ad af       	std	Y+61, r26	; 0x3d
    166c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    166e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1670:	7c ad       	ldd	r23, Y+60	; 0x3c
    1672:	8d ad       	ldd	r24, Y+61	; 0x3d
    1674:	9e ad       	ldd	r25, Y+62	; 0x3e
    1676:	2b ea       	ldi	r18, 0xAB	; 171
    1678:	3a ea       	ldi	r19, 0xAA	; 170
    167a:	4a e2       	ldi	r20, 0x2A	; 42
    167c:	50 e4       	ldi	r21, 0x40	; 64
    167e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	8f ab       	std	Y+55, r24	; 0x37
    1688:	98 af       	std	Y+56, r25	; 0x38
    168a:	a9 af       	std	Y+57, r26	; 0x39
    168c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    168e:	6f a9       	ldd	r22, Y+55	; 0x37
    1690:	78 ad       	ldd	r23, Y+56	; 0x38
    1692:	89 ad       	ldd	r24, Y+57	; 0x39
    1694:	9a ad       	ldd	r25, Y+58	; 0x3a
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e8       	ldi	r20, 0x80	; 128
    169c:	5f e3       	ldi	r21, 0x3F	; 63
    169e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16a2:	88 23       	and	r24, r24
    16a4:	1c f4       	brge	.+6      	; 0x16ac <HLCD_voidInit+0xa1e>
		__ticks = 1;
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	8e ab       	std	Y+54, r24	; 0x36
    16aa:	91 c0       	rjmp	.+290    	; 0x17ce <HLCD_voidInit+0xb40>
	else if (__tmp > 255)
    16ac:	6f a9       	ldd	r22, Y+55	; 0x37
    16ae:	78 ad       	ldd	r23, Y+56	; 0x38
    16b0:	89 ad       	ldd	r24, Y+57	; 0x39
    16b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4f e7       	ldi	r20, 0x7F	; 127
    16ba:	53 e4       	ldi	r21, 0x43	; 67
    16bc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16c0:	18 16       	cp	r1, r24
    16c2:	0c f0       	brlt	.+2      	; 0x16c6 <HLCD_voidInit+0xa38>
    16c4:	7b c0       	rjmp	.+246    	; 0x17bc <HLCD_voidInit+0xb2e>
	{
		_delay_ms(__us / 1000.0);
    16c6:	6b ad       	ldd	r22, Y+59	; 0x3b
    16c8:	7c ad       	ldd	r23, Y+60	; 0x3c
    16ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    16cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	4a e7       	ldi	r20, 0x7A	; 122
    16d4:	54 e4       	ldi	r21, 0x44	; 68
    16d6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	8a ab       	std	Y+50, r24	; 0x32
    16e0:	9b ab       	std	Y+51, r25	; 0x33
    16e2:	ac ab       	std	Y+52, r26	; 0x34
    16e4:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e6:	6a a9       	ldd	r22, Y+50	; 0x32
    16e8:	7b a9       	ldd	r23, Y+51	; 0x33
    16ea:	8c a9       	ldd	r24, Y+52	; 0x34
    16ec:	9d a9       	ldd	r25, Y+53	; 0x35
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	4a ef       	ldi	r20, 0xFA	; 250
    16f4:	54 e4       	ldi	r21, 0x44	; 68
    16f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	8e a7       	std	Y+46, r24	; 0x2e
    1700:	9f a7       	std	Y+47, r25	; 0x2f
    1702:	a8 ab       	std	Y+48, r26	; 0x30
    1704:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1706:	6e a5       	ldd	r22, Y+46	; 0x2e
    1708:	7f a5       	ldd	r23, Y+47	; 0x2f
    170a:	88 a9       	ldd	r24, Y+48	; 0x30
    170c:	99 a9       	ldd	r25, Y+49	; 0x31
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e8       	ldi	r20, 0x80	; 128
    1714:	5f e3       	ldi	r21, 0x3F	; 63
    1716:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    171a:	88 23       	and	r24, r24
    171c:	2c f4       	brge	.+10     	; 0x1728 <HLCD_voidInit+0xa9a>
		__ticks = 1;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	9d a7       	std	Y+45, r25	; 0x2d
    1724:	8c a7       	std	Y+44, r24	; 0x2c
    1726:	3f c0       	rjmp	.+126    	; 0x17a6 <HLCD_voidInit+0xb18>
	else if (__tmp > 65535)
    1728:	6e a5       	ldd	r22, Y+46	; 0x2e
    172a:	7f a5       	ldd	r23, Y+47	; 0x2f
    172c:	88 a9       	ldd	r24, Y+48	; 0x30
    172e:	99 a9       	ldd	r25, Y+49	; 0x31
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	3f ef       	ldi	r19, 0xFF	; 255
    1734:	4f e7       	ldi	r20, 0x7F	; 127
    1736:	57 e4       	ldi	r21, 0x47	; 71
    1738:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    173c:	18 16       	cp	r1, r24
    173e:	4c f5       	brge	.+82     	; 0x1792 <HLCD_voidInit+0xb04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1740:	6a a9       	ldd	r22, Y+50	; 0x32
    1742:	7b a9       	ldd	r23, Y+51	; 0x33
    1744:	8c a9       	ldd	r24, Y+52	; 0x34
    1746:	9d a9       	ldd	r25, Y+53	; 0x35
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e2       	ldi	r20, 0x20	; 32
    174e:	51 e4       	ldi	r21, 0x41	; 65
    1750:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	9d a7       	std	Y+45, r25	; 0x2d
    1766:	8c a7       	std	Y+44, r24	; 0x2c
    1768:	0f c0       	rjmp	.+30     	; 0x1788 <HLCD_voidInit+0xafa>
    176a:	88 ec       	ldi	r24, 0xC8	; 200
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	9b a7       	std	Y+43, r25	; 0x2b
    1770:	8a a7       	std	Y+42, r24	; 0x2a
    1772:	8a a5       	ldd	r24, Y+42	; 0x2a
    1774:	9b a5       	ldd	r25, Y+43	; 0x2b
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <HLCD_voidInit+0xae8>
    177a:	9b a7       	std	Y+43, r25	; 0x2b
    177c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1780:	9d a5       	ldd	r25, Y+45	; 0x2d
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	9d a7       	std	Y+45, r25	; 0x2d
    1786:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1788:	8c a5       	ldd	r24, Y+44	; 0x2c
    178a:	9d a5       	ldd	r25, Y+45	; 0x2d
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	69 f7       	brne	.-38     	; 0x176a <HLCD_voidInit+0xadc>
    1790:	24 c0       	rjmp	.+72     	; 0x17da <HLCD_voidInit+0xb4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1792:	6e a5       	ldd	r22, Y+46	; 0x2e
    1794:	7f a5       	ldd	r23, Y+47	; 0x2f
    1796:	88 a9       	ldd	r24, Y+48	; 0x30
    1798:	99 a9       	ldd	r25, Y+49	; 0x31
    179a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9d a7       	std	Y+45, r25	; 0x2d
    17a4:	8c a7       	std	Y+44, r24	; 0x2c
    17a6:	8c a5       	ldd	r24, Y+44	; 0x2c
    17a8:	9d a5       	ldd	r25, Y+45	; 0x2d
    17aa:	99 a7       	std	Y+41, r25	; 0x29
    17ac:	88 a7       	std	Y+40, r24	; 0x28
    17ae:	88 a5       	ldd	r24, Y+40	; 0x28
    17b0:	99 a5       	ldd	r25, Y+41	; 0x29
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <HLCD_voidInit+0xb24>
    17b6:	99 a7       	std	Y+41, r25	; 0x29
    17b8:	88 a7       	std	Y+40, r24	; 0x28
    17ba:	0f c0       	rjmp	.+30     	; 0x17da <HLCD_voidInit+0xb4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17bc:	6f a9       	ldd	r22, Y+55	; 0x37
    17be:	78 ad       	ldd	r23, Y+56	; 0x38
    17c0:	89 ad       	ldd	r24, Y+57	; 0x39
    17c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    17c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	8e ab       	std	Y+54, r24	; 0x36
    17ce:	8e a9       	ldd	r24, Y+54	; 0x36
    17d0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17d2:	8f a1       	ldd	r24, Y+39	; 0x27
    17d4:	8a 95       	dec	r24
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <HLCD_voidInit+0xb46>
    17d8:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    17da:	83 e0       	ldi	r24, 0x03	; 3
    17dc:	62 e0       	ldi	r22, 0x02	; 2
    17de:	40 e0       	ldi	r20, 0x00	; 0
    17e0:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>


	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D0,DIO_LOW);
    17e4:	84 e0       	ldi	r24, 0x04	; 4
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	40 e0       	ldi	r20, 0x00	; 0
    17ea:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D1,DIO_HIGH);
    17ee:	84 e0       	ldi	r24, 0x04	; 4
    17f0:	61 e0       	ldi	r22, 0x01	; 1
    17f2:	41 e0       	ldi	r20, 0x01	; 1
    17f4:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D2,DIO_LOW);
    17f8:	84 e0       	ldi	r24, 0x04	; 4
    17fa:	62 e0       	ldi	r22, 0x02	; 2
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D3,DIO_LOW);
    1802:	84 e0       	ldi	r24, 0x04	; 4
    1804:	63 e0       	ldi	r22, 0x03	; 3
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_LOW); 	/* RS=0, command  */
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	60 e0       	ldi	r22, 0x00	; 0
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW); 	/* RW=0, command Write */
    1816:	83 e0       	ldi	r24, 0x03	; 3
    1818:	61 e0       	ldi	r22, 0x01	; 1
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    1820:	83 e0       	ldi	r24, 0x03	; 3
    1822:	62 e0       	ldi	r22, 0x02	; 2
    1824:	41 e0       	ldi	r20, 0x01	; 1
    1826:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	a0 e8       	ldi	r26, 0x80	; 128
    1830:	bf e3       	ldi	r27, 0x3F	; 63
    1832:	8b a3       	std	Y+35, r24	; 0x23
    1834:	9c a3       	std	Y+36, r25	; 0x24
    1836:	ad a3       	std	Y+37, r26	; 0x25
    1838:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    183a:	6b a1       	ldd	r22, Y+35	; 0x23
    183c:	7c a1       	ldd	r23, Y+36	; 0x24
    183e:	8d a1       	ldd	r24, Y+37	; 0x25
    1840:	9e a1       	ldd	r25, Y+38	; 0x26
    1842:	2b ea       	ldi	r18, 0xAB	; 171
    1844:	3a ea       	ldi	r19, 0xAA	; 170
    1846:	4a e2       	ldi	r20, 0x2A	; 42
    1848:	50 e4       	ldi	r21, 0x40	; 64
    184a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	8f 8f       	std	Y+31, r24	; 0x1f
    1854:	98 a3       	std	Y+32, r25	; 0x20
    1856:	a9 a3       	std	Y+33, r26	; 0x21
    1858:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    185a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    185c:	78 a1       	ldd	r23, Y+32	; 0x20
    185e:	89 a1       	ldd	r24, Y+33	; 0x21
    1860:	9a a1       	ldd	r25, Y+34	; 0x22
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e8       	ldi	r20, 0x80	; 128
    1868:	5f e3       	ldi	r21, 0x3F	; 63
    186a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    186e:	88 23       	and	r24, r24
    1870:	1c f4       	brge	.+6      	; 0x1878 <HLCD_voidInit+0xbea>
		__ticks = 1;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	8e 8f       	std	Y+30, r24	; 0x1e
    1876:	91 c0       	rjmp	.+290    	; 0x199a <HLCD_voidInit+0xd0c>
	else if (__tmp > 255)
    1878:	6f 8d       	ldd	r22, Y+31	; 0x1f
    187a:	78 a1       	ldd	r23, Y+32	; 0x20
    187c:	89 a1       	ldd	r24, Y+33	; 0x21
    187e:	9a a1       	ldd	r25, Y+34	; 0x22
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	4f e7       	ldi	r20, 0x7F	; 127
    1886:	53 e4       	ldi	r21, 0x43	; 67
    1888:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    188c:	18 16       	cp	r1, r24
    188e:	0c f0       	brlt	.+2      	; 0x1892 <HLCD_voidInit+0xc04>
    1890:	7b c0       	rjmp	.+246    	; 0x1988 <HLCD_voidInit+0xcfa>
	{
		_delay_ms(__us / 1000.0);
    1892:	6b a1       	ldd	r22, Y+35	; 0x23
    1894:	7c a1       	ldd	r23, Y+36	; 0x24
    1896:	8d a1       	ldd	r24, Y+37	; 0x25
    1898:	9e a1       	ldd	r25, Y+38	; 0x26
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4a e7       	ldi	r20, 0x7A	; 122
    18a0:	54 e4       	ldi	r21, 0x44	; 68
    18a2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	8a 8f       	std	Y+26, r24	; 0x1a
    18ac:	9b 8f       	std	Y+27, r25	; 0x1b
    18ae:	ac 8f       	std	Y+28, r26	; 0x1c
    18b0:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    18b4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    18b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	4a ef       	ldi	r20, 0xFA	; 250
    18c0:	54 e4       	ldi	r21, 0x44	; 68
    18c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	8e 8b       	std	Y+22, r24	; 0x16
    18cc:	9f 8b       	std	Y+23, r25	; 0x17
    18ce:	a8 8f       	std	Y+24, r26	; 0x18
    18d0:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    18d2:	6e 89       	ldd	r22, Y+22	; 0x16
    18d4:	7f 89       	ldd	r23, Y+23	; 0x17
    18d6:	88 8d       	ldd	r24, Y+24	; 0x18
    18d8:	99 8d       	ldd	r25, Y+25	; 0x19
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e8       	ldi	r20, 0x80	; 128
    18e0:	5f e3       	ldi	r21, 0x3F	; 63
    18e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18e6:	88 23       	and	r24, r24
    18e8:	2c f4       	brge	.+10     	; 0x18f4 <HLCD_voidInit+0xc66>
		__ticks = 1;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	9d 8b       	std	Y+21, r25	; 0x15
    18f0:	8c 8b       	std	Y+20, r24	; 0x14
    18f2:	3f c0       	rjmp	.+126    	; 0x1972 <HLCD_voidInit+0xce4>
	else if (__tmp > 65535)
    18f4:	6e 89       	ldd	r22, Y+22	; 0x16
    18f6:	7f 89       	ldd	r23, Y+23	; 0x17
    18f8:	88 8d       	ldd	r24, Y+24	; 0x18
    18fa:	99 8d       	ldd	r25, Y+25	; 0x19
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	3f ef       	ldi	r19, 0xFF	; 255
    1900:	4f e7       	ldi	r20, 0x7F	; 127
    1902:	57 e4       	ldi	r21, 0x47	; 71
    1904:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1908:	18 16       	cp	r1, r24
    190a:	4c f5       	brge	.+82     	; 0x195e <HLCD_voidInit+0xcd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    190e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1910:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1912:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e2       	ldi	r20, 0x20	; 32
    191a:	51 e4       	ldi	r21, 0x41	; 65
    191c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	bc 01       	movw	r22, r24
    1926:	cd 01       	movw	r24, r26
    1928:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	9d 8b       	std	Y+21, r25	; 0x15
    1932:	8c 8b       	std	Y+20, r24	; 0x14
    1934:	0f c0       	rjmp	.+30     	; 0x1954 <HLCD_voidInit+0xcc6>
    1936:	88 ec       	ldi	r24, 0xC8	; 200
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	9b 8b       	std	Y+19, r25	; 0x13
    193c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    193e:	8a 89       	ldd	r24, Y+18	; 0x12
    1940:	9b 89       	ldd	r25, Y+19	; 0x13
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <HLCD_voidInit+0xcb4>
    1946:	9b 8b       	std	Y+19, r25	; 0x13
    1948:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194a:	8c 89       	ldd	r24, Y+20	; 0x14
    194c:	9d 89       	ldd	r25, Y+21	; 0x15
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	9d 8b       	std	Y+21, r25	; 0x15
    1952:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1954:	8c 89       	ldd	r24, Y+20	; 0x14
    1956:	9d 89       	ldd	r25, Y+21	; 0x15
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	69 f7       	brne	.-38     	; 0x1936 <HLCD_voidInit+0xca8>
    195c:	24 c0       	rjmp	.+72     	; 0x19a6 <HLCD_voidInit+0xd18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195e:	6e 89       	ldd	r22, Y+22	; 0x16
    1960:	7f 89       	ldd	r23, Y+23	; 0x17
    1962:	88 8d       	ldd	r24, Y+24	; 0x18
    1964:	99 8d       	ldd	r25, Y+25	; 0x19
    1966:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	9d 8b       	std	Y+21, r25	; 0x15
    1970:	8c 8b       	std	Y+20, r24	; 0x14
    1972:	8c 89       	ldd	r24, Y+20	; 0x14
    1974:	9d 89       	ldd	r25, Y+21	; 0x15
    1976:	99 8b       	std	Y+17, r25	; 0x11
    1978:	88 8b       	std	Y+16, r24	; 0x10
    197a:	88 89       	ldd	r24, Y+16	; 0x10
    197c:	99 89       	ldd	r25, Y+17	; 0x11
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <HLCD_voidInit+0xcf0>
    1982:	99 8b       	std	Y+17, r25	; 0x11
    1984:	88 8b       	std	Y+16, r24	; 0x10
    1986:	0f c0       	rjmp	.+30     	; 0x19a6 <HLCD_voidInit+0xd18>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1988:	6f 8d       	ldd	r22, Y+31	; 0x1f
    198a:	78 a1       	ldd	r23, Y+32	; 0x20
    198c:	89 a1       	ldd	r24, Y+33	; 0x21
    198e:	9a a1       	ldd	r25, Y+34	; 0x22
    1990:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	8e 8f       	std	Y+30, r24	; 0x1e
    199a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    199c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    199e:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a0:	8a 95       	dec	r24
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <HLCD_voidInit+0xd12>
    19a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    19a6:	83 e0       	ldi	r24, 0x03	; 3
    19a8:	62 e0       	ldi	r22, 0x02	; 2
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>

	HLCD_voidSendCommand(0x02); 	/*CMD for 4bit		*/
    19b0:	82 e0       	ldi	r24, 0x02	; 2
    19b2:	0e 94 17 11 	call	0x222e	; 0x222e <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x28);		/* Enabling 2lies 5*7   */
    19b6:	88 e2       	ldi	r24, 0x28	; 40
    19b8:	0e 94 17 11 	call	0x222e	; 0x222e <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x0c); 	/* setting cursor on and off */
    19bc:	8c e0       	ldi	r24, 0x0C	; 12
    19be:	0e 94 17 11 	call	0x222e	; 0x222e <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x06);		/* Increment cursor (shift cursor to right)	*/
    19c2:	86 e0       	ldi	r24, 0x06	; 6
    19c4:	0e 94 17 11 	call	0x222e	; 0x222e <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x01);		/* Clear display screen */
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	0e 94 17 11 	call	0x222e	; 0x222e <HLCD_voidSendCommand>
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a0 e0       	ldi	r26, 0x00	; 0
    19d4:	b0 e4       	ldi	r27, 0x40	; 64
    19d6:	8b 87       	std	Y+11, r24	; 0x0b
    19d8:	9c 87       	std	Y+12, r25	; 0x0c
    19da:	ad 87       	std	Y+13, r26	; 0x0d
    19dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19de:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	4a ef       	ldi	r20, 0xFA	; 250
    19ec:	54 e4       	ldi	r21, 0x44	; 68
    19ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	8f 83       	std	Y+7, r24	; 0x07
    19f8:	98 87       	std	Y+8, r25	; 0x08
    19fa:	a9 87       	std	Y+9, r26	; 0x09
    19fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1a00:	78 85       	ldd	r23, Y+8	; 0x08
    1a02:	89 85       	ldd	r24, Y+9	; 0x09
    1a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e8       	ldi	r20, 0x80	; 128
    1a0c:	5f e3       	ldi	r21, 0x3F	; 63
    1a0e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a12:	88 23       	and	r24, r24
    1a14:	2c f4       	brge	.+10     	; 0x1a20 <HLCD_voidInit+0xd92>
		__ticks = 1;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9e 83       	std	Y+6, r25	; 0x06
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
    1a1e:	3f c0       	rjmp	.+126    	; 0x1a9e <HLCD_voidInit+0xe10>
	else if (__tmp > 65535)
    1a20:	6f 81       	ldd	r22, Y+7	; 0x07
    1a22:	78 85       	ldd	r23, Y+8	; 0x08
    1a24:	89 85       	ldd	r24, Y+9	; 0x09
    1a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	3f ef       	ldi	r19, 0xFF	; 255
    1a2c:	4f e7       	ldi	r20, 0x7F	; 127
    1a2e:	57 e4       	ldi	r21, 0x47	; 71
    1a30:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a34:	18 16       	cp	r1, r24
    1a36:	4c f5       	brge	.+82     	; 0x1a8a <HLCD_voidInit+0xdfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e2       	ldi	r20, 0x20	; 32
    1a46:	51 e4       	ldi	r21, 0x41	; 65
    1a48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9e 83       	std	Y+6, r25	; 0x06
    1a5e:	8d 83       	std	Y+5, r24	; 0x05
    1a60:	0f c0       	rjmp	.+30     	; 0x1a80 <HLCD_voidInit+0xdf2>
    1a62:	88 ec       	ldi	r24, 0xC8	; 200
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9c 83       	std	Y+4, r25	; 0x04
    1a68:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <HLCD_voidInit+0xde0>
    1a72:	9c 83       	std	Y+4, r25	; 0x04
    1a74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	9e 83       	std	Y+6, r25	; 0x06
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	69 f7       	brne	.-38     	; 0x1a62 <HLCD_voidInit+0xdd4>
    1a88:	14 c0       	rjmp	.+40     	; 0x1ab2 <HLCD_voidInit+0xe24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8c:	78 85       	ldd	r23, Y+8	; 0x08
    1a8e:	89 85       	ldd	r24, Y+9	; 0x09
    1a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	9a 83       	std	Y+2, r25	; 0x02
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <HLCD_voidInit+0xe1c>
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1ab2:	c8 56       	subi	r28, 0x68	; 104
    1ab4:	df 4f       	sbci	r29, 0xFF	; 255
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	1f 91       	pop	r17
    1ac6:	0f 91       	pop	r16
    1ac8:	08 95       	ret

00001aca <HLCD_voidSendData>:

void HLCD_voidSendData(u8 Copy_u8Data){
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	c7 55       	subi	r28, 0x57	; 87
    1ad8:	d0 40       	sbci	r29, 0x00	; 0
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e9 5a       	subi	r30, 0xA9	; 169
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	80 83       	st	Z, r24

	/*Sending Data upper nibble*/
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D0,((Copy_u8Data>>4)&1));
    1aec:	fe 01       	movw	r30, r28
    1aee:	e9 5a       	subi	r30, 0xA9	; 169
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	80 81       	ld	r24, Z
    1af4:	82 95       	swap	r24
    1af6:	8f 70       	andi	r24, 0x0F	; 15
    1af8:	98 2f       	mov	r25, r24
    1afa:	91 70       	andi	r25, 0x01	; 1
    1afc:	84 e0       	ldi	r24, 0x04	; 4
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	49 2f       	mov	r20, r25
    1b02:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D1,((Copy_u8Data>>5)&1));
    1b06:	fe 01       	movw	r30, r28
    1b08:	e9 5a       	subi	r30, 0xA9	; 169
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	80 81       	ld	r24, Z
    1b0e:	82 95       	swap	r24
    1b10:	86 95       	lsr	r24
    1b12:	87 70       	andi	r24, 0x07	; 7
    1b14:	98 2f       	mov	r25, r24
    1b16:	91 70       	andi	r25, 0x01	; 1
    1b18:	84 e0       	ldi	r24, 0x04	; 4
    1b1a:	61 e0       	ldi	r22, 0x01	; 1
    1b1c:	49 2f       	mov	r20, r25
    1b1e:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D2,((Copy_u8Data>>6)&1));
    1b22:	fe 01       	movw	r30, r28
    1b24:	e9 5a       	subi	r30, 0xA9	; 169
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	80 81       	ld	r24, Z
    1b2a:	82 95       	swap	r24
    1b2c:	86 95       	lsr	r24
    1b2e:	86 95       	lsr	r24
    1b30:	83 70       	andi	r24, 0x03	; 3
    1b32:	98 2f       	mov	r25, r24
    1b34:	91 70       	andi	r25, 0x01	; 1
    1b36:	84 e0       	ldi	r24, 0x04	; 4
    1b38:	62 e0       	ldi	r22, 0x02	; 2
    1b3a:	49 2f       	mov	r20, r25
    1b3c:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D3,((Copy_u8Data>>7)&1));
    1b40:	fe 01       	movw	r30, r28
    1b42:	e9 5a       	subi	r30, 0xA9	; 169
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 81       	ld	r24, Z
    1b48:	98 2f       	mov	r25, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	99 27       	eor	r25, r25
    1b4e:	99 1f       	adc	r25, r25
    1b50:	84 e0       	ldi	r24, 0x04	; 4
    1b52:	63 e0       	ldi	r22, 0x03	; 3
    1b54:	49 2f       	mov	r20, r25
    1b56:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_HIGH);	/*	SET RS to send data */
    1b5a:	83 e0       	ldi	r24, 0x03	; 3
    1b5c:	60 e0       	ldi	r22, 0x00	; 0
    1b5e:	41 e0       	ldi	r20, 0x01	; 1
    1b60:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW);	/*	CLR RW to Enable write */
    1b64:	83 e0       	ldi	r24, 0x03	; 3
    1b66:	61 e0       	ldi	r22, 0x01	; 1
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>

	/* set EN for 2ms to make LCD CPU reads the data  */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    1b6e:	83 e0       	ldi	r24, 0x03	; 3
    1b70:	62 e0       	ldi	r22, 0x02	; 2
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
    1b78:	fe 01       	movw	r30, r28
    1b7a:	ed 5a       	subi	r30, 0xAD	; 173
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a0 e8       	ldi	r26, 0x80	; 128
    1b84:	bf e3       	ldi	r27, 0x3F	; 63
    1b86:	80 83       	st	Z, r24
    1b88:	91 83       	std	Z+1, r25	; 0x01
    1b8a:	a2 83       	std	Z+2, r26	; 0x02
    1b8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b8e:	8e 01       	movw	r16, r28
    1b90:	01 5b       	subi	r16, 0xB1	; 177
    1b92:	1f 4f       	sbci	r17, 0xFF	; 255
    1b94:	fe 01       	movw	r30, r28
    1b96:	ed 5a       	subi	r30, 0xAD	; 173
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	60 81       	ld	r22, Z
    1b9c:	71 81       	ldd	r23, Z+1	; 0x01
    1b9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ba0:	93 81       	ldd	r25, Z+3	; 0x03
    1ba2:	2b ea       	ldi	r18, 0xAB	; 171
    1ba4:	3a ea       	ldi	r19, 0xAA	; 170
    1ba6:	4a e2       	ldi	r20, 0x2A	; 42
    1ba8:	50 e4       	ldi	r21, 0x40	; 64
    1baa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	f8 01       	movw	r30, r16
    1bb4:	80 83       	st	Z, r24
    1bb6:	91 83       	std	Z+1, r25	; 0x01
    1bb8:	a2 83       	std	Z+2, r26	; 0x02
    1bba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e1 5b       	subi	r30, 0xB1	; 177
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	60 81       	ld	r22, Z
    1bc4:	71 81       	ldd	r23, Z+1	; 0x01
    1bc6:	82 81       	ldd	r24, Z+2	; 0x02
    1bc8:	93 81       	ldd	r25, Z+3	; 0x03
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e8       	ldi	r20, 0x80	; 128
    1bd0:	5f e3       	ldi	r21, 0x3F	; 63
    1bd2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bd6:	88 23       	and	r24, r24
    1bd8:	34 f4       	brge	.+12     	; 0x1be6 <HLCD_voidSendData+0x11c>
		__ticks = 1;
    1bda:	fe 01       	movw	r30, r28
    1bdc:	e2 5b       	subi	r30, 0xB2	; 178
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	80 83       	st	Z, r24
    1be4:	e0 c0       	rjmp	.+448    	; 0x1da6 <HLCD_voidSendData+0x2dc>
	else if (__tmp > 255)
    1be6:	fe 01       	movw	r30, r28
    1be8:	e1 5b       	subi	r30, 0xB1	; 177
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	60 81       	ld	r22, Z
    1bee:	71 81       	ldd	r23, Z+1	; 0x01
    1bf0:	82 81       	ldd	r24, Z+2	; 0x02
    1bf2:	93 81       	ldd	r25, Z+3	; 0x03
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	4f e7       	ldi	r20, 0x7F	; 127
    1bfa:	53 e4       	ldi	r21, 0x43	; 67
    1bfc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c00:	18 16       	cp	r1, r24
    1c02:	0c f0       	brlt	.+2      	; 0x1c06 <HLCD_voidSendData+0x13c>
    1c04:	c0 c0       	rjmp	.+384    	; 0x1d86 <HLCD_voidSendData+0x2bc>
	{
		_delay_ms(__us / 1000.0);
    1c06:	fe 01       	movw	r30, r28
    1c08:	ed 5a       	subi	r30, 0xAD	; 173
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	60 81       	ld	r22, Z
    1c0e:	71 81       	ldd	r23, Z+1	; 0x01
    1c10:	82 81       	ldd	r24, Z+2	; 0x02
    1c12:	93 81       	ldd	r25, Z+3	; 0x03
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	4a e7       	ldi	r20, 0x7A	; 122
    1c1a:	54 e4       	ldi	r21, 0x44	; 68
    1c1c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	fe 01       	movw	r30, r28
    1c26:	e6 5b       	subi	r30, 0xB6	; 182
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	80 83       	st	Z, r24
    1c2c:	91 83       	std	Z+1, r25	; 0x01
    1c2e:	a2 83       	std	Z+2, r26	; 0x02
    1c30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c32:	8e 01       	movw	r16, r28
    1c34:	0a 5b       	subi	r16, 0xBA	; 186
    1c36:	1f 4f       	sbci	r17, 0xFF	; 255
    1c38:	fe 01       	movw	r30, r28
    1c3a:	e6 5b       	subi	r30, 0xB6	; 182
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	60 81       	ld	r22, Z
    1c40:	71 81       	ldd	r23, Z+1	; 0x01
    1c42:	82 81       	ldd	r24, Z+2	; 0x02
    1c44:	93 81       	ldd	r25, Z+3	; 0x03
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	4a ef       	ldi	r20, 0xFA	; 250
    1c4c:	54 e4       	ldi	r21, 0x44	; 68
    1c4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	f8 01       	movw	r30, r16
    1c58:	80 83       	st	Z, r24
    1c5a:	91 83       	std	Z+1, r25	; 0x01
    1c5c:	a2 83       	std	Z+2, r26	; 0x02
    1c5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c60:	fe 01       	movw	r30, r28
    1c62:	ea 5b       	subi	r30, 0xBA	; 186
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	60 81       	ld	r22, Z
    1c68:	71 81       	ldd	r23, Z+1	; 0x01
    1c6a:	82 81       	ldd	r24, Z+2	; 0x02
    1c6c:	93 81       	ldd	r25, Z+3	; 0x03
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e8       	ldi	r20, 0x80	; 128
    1c74:	5f e3       	ldi	r21, 0x3F	; 63
    1c76:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c7a:	88 23       	and	r24, r24
    1c7c:	44 f4       	brge	.+16     	; 0x1c8e <HLCD_voidSendData+0x1c4>
		__ticks = 1;
    1c7e:	fe 01       	movw	r30, r28
    1c80:	ec 5b       	subi	r30, 0xBC	; 188
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	91 83       	std	Z+1, r25	; 0x01
    1c8a:	80 83       	st	Z, r24
    1c8c:	64 c0       	rjmp	.+200    	; 0x1d56 <HLCD_voidSendData+0x28c>
	else if (__tmp > 65535)
    1c8e:	fe 01       	movw	r30, r28
    1c90:	ea 5b       	subi	r30, 0xBA	; 186
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ca0:	4f e7       	ldi	r20, 0x7F	; 127
    1ca2:	57 e4       	ldi	r21, 0x47	; 71
    1ca4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ca8:	18 16       	cp	r1, r24
    1caa:	0c f0       	brlt	.+2      	; 0x1cae <HLCD_voidSendData+0x1e4>
    1cac:	43 c0       	rjmp	.+134    	; 0x1d34 <HLCD_voidSendData+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cae:	fe 01       	movw	r30, r28
    1cb0:	e6 5b       	subi	r30, 0xB6	; 182
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	60 81       	ld	r22, Z
    1cb6:	71 81       	ldd	r23, Z+1	; 0x01
    1cb8:	82 81       	ldd	r24, Z+2	; 0x02
    1cba:	93 81       	ldd	r25, Z+3	; 0x03
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e2       	ldi	r20, 0x20	; 32
    1cc2:	51 e4       	ldi	r21, 0x41	; 65
    1cc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	8e 01       	movw	r16, r28
    1cce:	0c 5b       	subi	r16, 0xBC	; 188
    1cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd2:	bc 01       	movw	r22, r24
    1cd4:	cd 01       	movw	r24, r26
    1cd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	f8 01       	movw	r30, r16
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	80 83       	st	Z, r24
    1ce4:	1f c0       	rjmp	.+62     	; 0x1d24 <HLCD_voidSendData+0x25a>
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	ee 5b       	subi	r30, 0xBE	; 190
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	88 ec       	ldi	r24, 0xC8	; 200
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	91 83       	std	Z+1, r25	; 0x01
    1cf2:	80 83       	st	Z, r24
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	ee 5b       	subi	r30, 0xBE	; 190
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	80 81       	ld	r24, Z
    1cfc:	91 81       	ldd	r25, Z+1	; 0x01
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <HLCD_voidSendData+0x234>
    1d02:	fe 01       	movw	r30, r28
    1d04:	ee 5b       	subi	r30, 0xBE	; 190
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	91 83       	std	Z+1, r25	; 0x01
    1d0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0c:	de 01       	movw	r26, r28
    1d0e:	ac 5b       	subi	r26, 0xBC	; 188
    1d10:	bf 4f       	sbci	r27, 0xFF	; 255
    1d12:	fe 01       	movw	r30, r28
    1d14:	ec 5b       	subi	r30, 0xBC	; 188
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	80 81       	ld	r24, Z
    1d1a:	91 81       	ldd	r25, Z+1	; 0x01
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	11 96       	adiw	r26, 0x01	; 1
    1d20:	9c 93       	st	X, r25
    1d22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d24:	fe 01       	movw	r30, r28
    1d26:	ec 5b       	subi	r30, 0xBC	; 188
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	80 81       	ld	r24, Z
    1d2c:	91 81       	ldd	r25, Z+1	; 0x01
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	d1 f6       	brne	.-76     	; 0x1ce6 <HLCD_voidSendData+0x21c>
    1d32:	42 c0       	rjmp	.+132    	; 0x1db8 <HLCD_voidSendData+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d34:	8e 01       	movw	r16, r28
    1d36:	0c 5b       	subi	r16, 0xBC	; 188
    1d38:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	ea 5b       	subi	r30, 0xBA	; 186
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	60 81       	ld	r22, Z
    1d42:	71 81       	ldd	r23, Z+1	; 0x01
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	93 81       	ldd	r25, Z+3	; 0x03
    1d48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	f8 01       	movw	r30, r16
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	80 83       	st	Z, r24
    1d56:	de 01       	movw	r26, r28
    1d58:	a0 5c       	subi	r26, 0xC0	; 192
    1d5a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	ec 5b       	subi	r30, 0xBC	; 188
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	80 81       	ld	r24, Z
    1d64:	91 81       	ldd	r25, Z+1	; 0x01
    1d66:	11 96       	adiw	r26, 0x01	; 1
    1d68:	9c 93       	st	X, r25
    1d6a:	8e 93       	st	-X, r24
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e0 5c       	subi	r30, 0xC0	; 192
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <HLCD_voidSendData+0x2ac>
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e0 5c       	subi	r30, 0xC0	; 192
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	80 83       	st	Z, r24
    1d84:	19 c0       	rjmp	.+50     	; 0x1db8 <HLCD_voidSendData+0x2ee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d86:	8e 01       	movw	r16, r28
    1d88:	02 5b       	subi	r16, 0xB2	; 178
    1d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	e1 5b       	subi	r30, 0xB1	; 177
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	60 81       	ld	r22, Z
    1d94:	71 81       	ldd	r23, Z+1	; 0x01
    1d96:	82 81       	ldd	r24, Z+2	; 0x02
    1d98:	93 81       	ldd	r25, Z+3	; 0x03
    1d9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	f8 01       	movw	r30, r16
    1da4:	80 83       	st	Z, r24
    1da6:	fe 01       	movw	r30, r28
    1da8:	e2 5b       	subi	r30, 0xB2	; 178
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	80 81       	ld	r24, Z
    1dae:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1db0:	8f ad       	ldd	r24, Y+63	; 0x3f
    1db2:	8a 95       	dec	r24
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <HLCD_voidSendData+0x2e8>
    1db6:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    1db8:	83 e0       	ldi	r24, 0x03	; 3
    1dba:	62 e0       	ldi	r22, 0x02	; 2
    1dbc:	40 e0       	ldi	r20, 0x00	; 0
    1dbe:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	a8 e4       	ldi	r26, 0x48	; 72
    1dc8:	b3 e4       	ldi	r27, 0x43	; 67
    1dca:	8b af       	std	Y+59, r24	; 0x3b
    1dcc:	9c af       	std	Y+60, r25	; 0x3c
    1dce:	ad af       	std	Y+61, r26	; 0x3d
    1dd0:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dd2:	6b ad       	ldd	r22, Y+59	; 0x3b
    1dd4:	7c ad       	ldd	r23, Y+60	; 0x3c
    1dd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dda:	2b ea       	ldi	r18, 0xAB	; 171
    1ddc:	3a ea       	ldi	r19, 0xAA	; 170
    1dde:	4a e2       	ldi	r20, 0x2A	; 42
    1de0:	50 e4       	ldi	r21, 0x40	; 64
    1de2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	8f ab       	std	Y+55, r24	; 0x37
    1dec:	98 af       	std	Y+56, r25	; 0x38
    1dee:	a9 af       	std	Y+57, r26	; 0x39
    1df0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1df2:	6f a9       	ldd	r22, Y+55	; 0x37
    1df4:	78 ad       	ldd	r23, Y+56	; 0x38
    1df6:	89 ad       	ldd	r24, Y+57	; 0x39
    1df8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e8       	ldi	r20, 0x80	; 128
    1e00:	5f e3       	ldi	r21, 0x3F	; 63
    1e02:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e06:	88 23       	and	r24, r24
    1e08:	1c f4       	brge	.+6      	; 0x1e10 <HLCD_voidSendData+0x346>
		__ticks = 1;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	8e ab       	std	Y+54, r24	; 0x36
    1e0e:	91 c0       	rjmp	.+290    	; 0x1f32 <HLCD_voidSendData+0x468>
	else if (__tmp > 255)
    1e10:	6f a9       	ldd	r22, Y+55	; 0x37
    1e12:	78 ad       	ldd	r23, Y+56	; 0x38
    1e14:	89 ad       	ldd	r24, Y+57	; 0x39
    1e16:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	4f e7       	ldi	r20, 0x7F	; 127
    1e1e:	53 e4       	ldi	r21, 0x43	; 67
    1e20:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e24:	18 16       	cp	r1, r24
    1e26:	0c f0       	brlt	.+2      	; 0x1e2a <HLCD_voidSendData+0x360>
    1e28:	7b c0       	rjmp	.+246    	; 0x1f20 <HLCD_voidSendData+0x456>
	{
		_delay_ms(__us / 1000.0);
    1e2a:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e2c:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e30:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	4a e7       	ldi	r20, 0x7A	; 122
    1e38:	54 e4       	ldi	r21, 0x44	; 68
    1e3a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	8a ab       	std	Y+50, r24	; 0x32
    1e44:	9b ab       	std	Y+51, r25	; 0x33
    1e46:	ac ab       	std	Y+52, r26	; 0x34
    1e48:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4a:	6a a9       	ldd	r22, Y+50	; 0x32
    1e4c:	7b a9       	ldd	r23, Y+51	; 0x33
    1e4e:	8c a9       	ldd	r24, Y+52	; 0x34
    1e50:	9d a9       	ldd	r25, Y+53	; 0x35
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	4a ef       	ldi	r20, 0xFA	; 250
    1e58:	54 e4       	ldi	r21, 0x44	; 68
    1e5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	8e a7       	std	Y+46, r24	; 0x2e
    1e64:	9f a7       	std	Y+47, r25	; 0x2f
    1e66:	a8 ab       	std	Y+48, r26	; 0x30
    1e68:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1e6a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e6c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e6e:	88 a9       	ldd	r24, Y+48	; 0x30
    1e70:	99 a9       	ldd	r25, Y+49	; 0x31
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e8       	ldi	r20, 0x80	; 128
    1e78:	5f e3       	ldi	r21, 0x3F	; 63
    1e7a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e7e:	88 23       	and	r24, r24
    1e80:	2c f4       	brge	.+10     	; 0x1e8c <HLCD_voidSendData+0x3c2>
		__ticks = 1;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	9d a7       	std	Y+45, r25	; 0x2d
    1e88:	8c a7       	std	Y+44, r24	; 0x2c
    1e8a:	3f c0       	rjmp	.+126    	; 0x1f0a <HLCD_voidSendData+0x440>
	else if (__tmp > 65535)
    1e8c:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e8e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e90:	88 a9       	ldd	r24, Y+48	; 0x30
    1e92:	99 a9       	ldd	r25, Y+49	; 0x31
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	3f ef       	ldi	r19, 0xFF	; 255
    1e98:	4f e7       	ldi	r20, 0x7F	; 127
    1e9a:	57 e4       	ldi	r21, 0x47	; 71
    1e9c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ea0:	18 16       	cp	r1, r24
    1ea2:	4c f5       	brge	.+82     	; 0x1ef6 <HLCD_voidSendData+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea4:	6a a9       	ldd	r22, Y+50	; 0x32
    1ea6:	7b a9       	ldd	r23, Y+51	; 0x33
    1ea8:	8c a9       	ldd	r24, Y+52	; 0x34
    1eaa:	9d a9       	ldd	r25, Y+53	; 0x35
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e2       	ldi	r20, 0x20	; 32
    1eb2:	51 e4       	ldi	r21, 0x41	; 65
    1eb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	bc 01       	movw	r22, r24
    1ebe:	cd 01       	movw	r24, r26
    1ec0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	9d a7       	std	Y+45, r25	; 0x2d
    1eca:	8c a7       	std	Y+44, r24	; 0x2c
    1ecc:	0f c0       	rjmp	.+30     	; 0x1eec <HLCD_voidSendData+0x422>
    1ece:	88 ec       	ldi	r24, 0xC8	; 200
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	9b a7       	std	Y+43, r25	; 0x2b
    1ed4:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ed6:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ed8:	9b a5       	ldd	r25, Y+43	; 0x2b
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	f1 f7       	brne	.-4      	; 0x1eda <HLCD_voidSendData+0x410>
    1ede:	9b a7       	std	Y+43, r25	; 0x2b
    1ee0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee2:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ee4:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	9d a7       	std	Y+45, r25	; 0x2d
    1eea:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eec:	8c a5       	ldd	r24, Y+44	; 0x2c
    1eee:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	69 f7       	brne	.-38     	; 0x1ece <HLCD_voidSendData+0x404>
    1ef4:	24 c0       	rjmp	.+72     	; 0x1f3e <HLCD_voidSendData+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ef8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1efa:	88 a9       	ldd	r24, Y+48	; 0x30
    1efc:	99 a9       	ldd	r25, Y+49	; 0x31
    1efe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	9d a7       	std	Y+45, r25	; 0x2d
    1f08:	8c a7       	std	Y+44, r24	; 0x2c
    1f0a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f0c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1f0e:	99 a7       	std	Y+41, r25	; 0x29
    1f10:	88 a7       	std	Y+40, r24	; 0x28
    1f12:	88 a5       	ldd	r24, Y+40	; 0x28
    1f14:	99 a5       	ldd	r25, Y+41	; 0x29
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <HLCD_voidSendData+0x44c>
    1f1a:	99 a7       	std	Y+41, r25	; 0x29
    1f1c:	88 a7       	std	Y+40, r24	; 0x28
    1f1e:	0f c0       	rjmp	.+30     	; 0x1f3e <HLCD_voidSendData+0x474>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f20:	6f a9       	ldd	r22, Y+55	; 0x37
    1f22:	78 ad       	ldd	r23, Y+56	; 0x38
    1f24:	89 ad       	ldd	r24, Y+57	; 0x39
    1f26:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	8e ab       	std	Y+54, r24	; 0x36
    1f32:	8e a9       	ldd	r24, Y+54	; 0x36
    1f34:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f36:	8f a1       	ldd	r24, Y+39	; 0x27
    1f38:	8a 95       	dec	r24
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <HLCD_voidSendData+0x46e>
    1f3c:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);

	/*Sending Data LOWER nibble */
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D0,((Copy_u8Data>>0)&1));
    1f3e:	fe 01       	movw	r30, r28
    1f40:	e9 5a       	subi	r30, 0xA9	; 169
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	80 81       	ld	r24, Z
    1f46:	98 2f       	mov	r25, r24
    1f48:	91 70       	andi	r25, 0x01	; 1
    1f4a:	84 e0       	ldi	r24, 0x04	; 4
    1f4c:	60 e0       	ldi	r22, 0x00	; 0
    1f4e:	49 2f       	mov	r20, r25
    1f50:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D1,((Copy_u8Data>>1)&1));
    1f54:	fe 01       	movw	r30, r28
    1f56:	e9 5a       	subi	r30, 0xA9	; 169
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	80 81       	ld	r24, Z
    1f5c:	86 95       	lsr	r24
    1f5e:	98 2f       	mov	r25, r24
    1f60:	91 70       	andi	r25, 0x01	; 1
    1f62:	84 e0       	ldi	r24, 0x04	; 4
    1f64:	61 e0       	ldi	r22, 0x01	; 1
    1f66:	49 2f       	mov	r20, r25
    1f68:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D2,((Copy_u8Data>>2)&1));
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e9 5a       	subi	r30, 0xA9	; 169
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	80 81       	ld	r24, Z
    1f74:	86 95       	lsr	r24
    1f76:	86 95       	lsr	r24
    1f78:	98 2f       	mov	r25, r24
    1f7a:	91 70       	andi	r25, 0x01	; 1
    1f7c:	84 e0       	ldi	r24, 0x04	; 4
    1f7e:	62 e0       	ldi	r22, 0x02	; 2
    1f80:	49 2f       	mov	r20, r25
    1f82:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D3,((Copy_u8Data>>3)&1));
    1f86:	fe 01       	movw	r30, r28
    1f88:	e9 5a       	subi	r30, 0xA9	; 169
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 81       	ld	r24, Z
    1f8e:	86 95       	lsr	r24
    1f90:	86 95       	lsr	r24
    1f92:	86 95       	lsr	r24
    1f94:	98 2f       	mov	r25, r24
    1f96:	91 70       	andi	r25, 0x01	; 1
    1f98:	84 e0       	ldi	r24, 0x04	; 4
    1f9a:	63 e0       	ldi	r22, 0x03	; 3
    1f9c:	49 2f       	mov	r20, r25
    1f9e:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    1fa2:	83 e0       	ldi	r24, 0x03	; 3
    1fa4:	62 e0       	ldi	r22, 0x02	; 2
    1fa6:	41 e0       	ldi	r20, 0x01	; 1
    1fa8:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a0 e8       	ldi	r26, 0x80	; 128
    1fb2:	bf e3       	ldi	r27, 0x3F	; 63
    1fb4:	8b a3       	std	Y+35, r24	; 0x23
    1fb6:	9c a3       	std	Y+36, r25	; 0x24
    1fb8:	ad a3       	std	Y+37, r26	; 0x25
    1fba:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fbc:	6b a1       	ldd	r22, Y+35	; 0x23
    1fbe:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fc2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fc4:	2b ea       	ldi	r18, 0xAB	; 171
    1fc6:	3a ea       	ldi	r19, 0xAA	; 170
    1fc8:	4a e2       	ldi	r20, 0x2A	; 42
    1fca:	50 e4       	ldi	r21, 0x40	; 64
    1fcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	8f 8f       	std	Y+31, r24	; 0x1f
    1fd6:	98 a3       	std	Y+32, r25	; 0x20
    1fd8:	a9 a3       	std	Y+33, r26	; 0x21
    1fda:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1fdc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1fde:	78 a1       	ldd	r23, Y+32	; 0x20
    1fe0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fe2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e8       	ldi	r20, 0x80	; 128
    1fea:	5f e3       	ldi	r21, 0x3F	; 63
    1fec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ff0:	88 23       	and	r24, r24
    1ff2:	1c f4       	brge	.+6      	; 0x1ffa <HLCD_voidSendData+0x530>
		__ticks = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	8e 8f       	std	Y+30, r24	; 0x1e
    1ff8:	91 c0       	rjmp	.+290    	; 0x211c <HLCD_voidSendData+0x652>
	else if (__tmp > 255)
    1ffa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ffc:	78 a1       	ldd	r23, Y+32	; 0x20
    1ffe:	89 a1       	ldd	r24, Y+33	; 0x21
    2000:	9a a1       	ldd	r25, Y+34	; 0x22
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4f e7       	ldi	r20, 0x7F	; 127
    2008:	53 e4       	ldi	r21, 0x43	; 67
    200a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    200e:	18 16       	cp	r1, r24
    2010:	0c f0       	brlt	.+2      	; 0x2014 <HLCD_voidSendData+0x54a>
    2012:	7b c0       	rjmp	.+246    	; 0x210a <HLCD_voidSendData+0x640>
	{
		_delay_ms(__us / 1000.0);
    2014:	6b a1       	ldd	r22, Y+35	; 0x23
    2016:	7c a1       	ldd	r23, Y+36	; 0x24
    2018:	8d a1       	ldd	r24, Y+37	; 0x25
    201a:	9e a1       	ldd	r25, Y+38	; 0x26
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	4a e7       	ldi	r20, 0x7A	; 122
    2022:	54 e4       	ldi	r21, 0x44	; 68
    2024:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	8a 8f       	std	Y+26, r24	; 0x1a
    202e:	9b 8f       	std	Y+27, r25	; 0x1b
    2030:	ac 8f       	std	Y+28, r26	; 0x1c
    2032:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2034:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2036:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2038:	8c 8d       	ldd	r24, Y+28	; 0x1c
    203a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	4a ef       	ldi	r20, 0xFA	; 250
    2042:	54 e4       	ldi	r21, 0x44	; 68
    2044:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	8e 8b       	std	Y+22, r24	; 0x16
    204e:	9f 8b       	std	Y+23, r25	; 0x17
    2050:	a8 8f       	std	Y+24, r26	; 0x18
    2052:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2054:	6e 89       	ldd	r22, Y+22	; 0x16
    2056:	7f 89       	ldd	r23, Y+23	; 0x17
    2058:	88 8d       	ldd	r24, Y+24	; 0x18
    205a:	99 8d       	ldd	r25, Y+25	; 0x19
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	5f e3       	ldi	r21, 0x3F	; 63
    2064:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2068:	88 23       	and	r24, r24
    206a:	2c f4       	brge	.+10     	; 0x2076 <HLCD_voidSendData+0x5ac>
		__ticks = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9d 8b       	std	Y+21, r25	; 0x15
    2072:	8c 8b       	std	Y+20, r24	; 0x14
    2074:	3f c0       	rjmp	.+126    	; 0x20f4 <HLCD_voidSendData+0x62a>
	else if (__tmp > 65535)
    2076:	6e 89       	ldd	r22, Y+22	; 0x16
    2078:	7f 89       	ldd	r23, Y+23	; 0x17
    207a:	88 8d       	ldd	r24, Y+24	; 0x18
    207c:	99 8d       	ldd	r25, Y+25	; 0x19
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	57 e4       	ldi	r21, 0x47	; 71
    2086:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    208a:	18 16       	cp	r1, r24
    208c:	4c f5       	brge	.+82     	; 0x20e0 <HLCD_voidSendData+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2090:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2092:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2094:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e2       	ldi	r20, 0x20	; 32
    209c:	51 e4       	ldi	r21, 0x41	; 65
    209e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	9d 8b       	std	Y+21, r25	; 0x15
    20b4:	8c 8b       	std	Y+20, r24	; 0x14
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <HLCD_voidSendData+0x60c>
    20b8:	88 ec       	ldi	r24, 0xC8	; 200
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	9b 8b       	std	Y+19, r25	; 0x13
    20be:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20c0:	8a 89       	ldd	r24, Y+18	; 0x12
    20c2:	9b 89       	ldd	r25, Y+19	; 0x13
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <HLCD_voidSendData+0x5fa>
    20c8:	9b 8b       	std	Y+19, r25	; 0x13
    20ca:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	8c 89       	ldd	r24, Y+20	; 0x14
    20ce:	9d 89       	ldd	r25, Y+21	; 0x15
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	9d 8b       	std	Y+21, r25	; 0x15
    20d4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d6:	8c 89       	ldd	r24, Y+20	; 0x14
    20d8:	9d 89       	ldd	r25, Y+21	; 0x15
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	69 f7       	brne	.-38     	; 0x20b8 <HLCD_voidSendData+0x5ee>
    20de:	24 c0       	rjmp	.+72     	; 0x2128 <HLCD_voidSendData+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e0:	6e 89       	ldd	r22, Y+22	; 0x16
    20e2:	7f 89       	ldd	r23, Y+23	; 0x17
    20e4:	88 8d       	ldd	r24, Y+24	; 0x18
    20e6:	99 8d       	ldd	r25, Y+25	; 0x19
    20e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9d 8b       	std	Y+21, r25	; 0x15
    20f2:	8c 8b       	std	Y+20, r24	; 0x14
    20f4:	8c 89       	ldd	r24, Y+20	; 0x14
    20f6:	9d 89       	ldd	r25, Y+21	; 0x15
    20f8:	99 8b       	std	Y+17, r25	; 0x11
    20fa:	88 8b       	std	Y+16, r24	; 0x10
    20fc:	88 89       	ldd	r24, Y+16	; 0x10
    20fe:	99 89       	ldd	r25, Y+17	; 0x11
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <HLCD_voidSendData+0x636>
    2104:	99 8b       	std	Y+17, r25	; 0x11
    2106:	88 8b       	std	Y+16, r24	; 0x10
    2108:	0f c0       	rjmp	.+30     	; 0x2128 <HLCD_voidSendData+0x65e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    210a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    210c:	78 a1       	ldd	r23, Y+32	; 0x20
    210e:	89 a1       	ldd	r24, Y+33	; 0x21
    2110:	9a a1       	ldd	r25, Y+34	; 0x22
    2112:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	8e 8f       	std	Y+30, r24	; 0x1e
    211c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    211e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2120:	8f 85       	ldd	r24, Y+15	; 0x0f
    2122:	8a 95       	dec	r24
    2124:	f1 f7       	brne	.-4      	; 0x2122 <HLCD_voidSendData+0x658>
    2126:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    2128:	83 e0       	ldi	r24, 0x03	; 3
    212a:	62 e0       	ldi	r22, 0x02	; 2
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	a0 e0       	ldi	r26, 0x00	; 0
    2138:	b0 e4       	ldi	r27, 0x40	; 64
    213a:	8b 87       	std	Y+11, r24	; 0x0b
    213c:	9c 87       	std	Y+12, r25	; 0x0c
    213e:	ad 87       	std	Y+13, r26	; 0x0d
    2140:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2142:	6b 85       	ldd	r22, Y+11	; 0x0b
    2144:	7c 85       	ldd	r23, Y+12	; 0x0c
    2146:	8d 85       	ldd	r24, Y+13	; 0x0d
    2148:	9e 85       	ldd	r25, Y+14	; 0x0e
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4a ef       	ldi	r20, 0xFA	; 250
    2150:	54 e4       	ldi	r21, 0x44	; 68
    2152:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	8f 83       	std	Y+7, r24	; 0x07
    215c:	98 87       	std	Y+8, r25	; 0x08
    215e:	a9 87       	std	Y+9, r26	; 0x09
    2160:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2162:	6f 81       	ldd	r22, Y+7	; 0x07
    2164:	78 85       	ldd	r23, Y+8	; 0x08
    2166:	89 85       	ldd	r24, Y+9	; 0x09
    2168:	9a 85       	ldd	r25, Y+10	; 0x0a
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e8       	ldi	r20, 0x80	; 128
    2170:	5f e3       	ldi	r21, 0x3F	; 63
    2172:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2176:	88 23       	and	r24, r24
    2178:	2c f4       	brge	.+10     	; 0x2184 <HLCD_voidSendData+0x6ba>
		__ticks = 1;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	9e 83       	std	Y+6, r25	; 0x06
    2180:	8d 83       	std	Y+5, r24	; 0x05
    2182:	3f c0       	rjmp	.+126    	; 0x2202 <HLCD_voidSendData+0x738>
	else if (__tmp > 65535)
    2184:	6f 81       	ldd	r22, Y+7	; 0x07
    2186:	78 85       	ldd	r23, Y+8	; 0x08
    2188:	89 85       	ldd	r24, Y+9	; 0x09
    218a:	9a 85       	ldd	r25, Y+10	; 0x0a
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	3f ef       	ldi	r19, 0xFF	; 255
    2190:	4f e7       	ldi	r20, 0x7F	; 127
    2192:	57 e4       	ldi	r21, 0x47	; 71
    2194:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2198:	18 16       	cp	r1, r24
    219a:	4c f5       	brge	.+82     	; 0x21ee <HLCD_voidSendData+0x724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219c:	6b 85       	ldd	r22, Y+11	; 0x0b
    219e:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e2       	ldi	r20, 0x20	; 32
    21aa:	51 e4       	ldi	r21, 0x41	; 65
    21ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
    21c4:	0f c0       	rjmp	.+30     	; 0x21e4 <HLCD_voidSendData+0x71a>
    21c6:	88 ec       	ldi	r24, 0xC8	; 200
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	9c 83       	std	Y+4, r25	; 0x04
    21cc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	9c 81       	ldd	r25, Y+4	; 0x04
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <HLCD_voidSendData+0x708>
    21d6:	9c 83       	std	Y+4, r25	; 0x04
    21d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21da:	8d 81       	ldd	r24, Y+5	; 0x05
    21dc:	9e 81       	ldd	r25, Y+6	; 0x06
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	9e 83       	std	Y+6, r25	; 0x06
    21e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	9e 81       	ldd	r25, Y+6	; 0x06
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	69 f7       	brne	.-38     	; 0x21c6 <HLCD_voidSendData+0x6fc>
    21ec:	14 c0       	rjmp	.+40     	; 0x2216 <HLCD_voidSendData+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ee:	6f 81       	ldd	r22, Y+7	; 0x07
    21f0:	78 85       	ldd	r23, Y+8	; 0x08
    21f2:	89 85       	ldd	r24, Y+9	; 0x09
    21f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	9e 83       	std	Y+6, r25	; 0x06
    2200:	8d 83       	std	Y+5, r24	; 0x05
    2202:	8d 81       	ldd	r24, Y+5	; 0x05
    2204:	9e 81       	ldd	r25, Y+6	; 0x06
    2206:	9a 83       	std	Y+2, r25	; 0x02
    2208:	89 83       	std	Y+1, r24	; 0x01
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	9a 81       	ldd	r25, Y+2	; 0x02
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <HLCD_voidSendData+0x744>
    2212:	9a 83       	std	Y+2, r25	; 0x02
    2214:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2216:	c9 5a       	subi	r28, 0xA9	; 169
    2218:	df 4f       	sbci	r29, 0xFF	; 255
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	08 95       	ret

0000222e <HLCD_voidSendCommand>:


void HLCD_voidSendCommand(u8 Copy_u8Command){
    222e:	0f 93       	push	r16
    2230:	1f 93       	push	r17
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	c7 55       	subi	r28, 0x57	; 87
    223c:	d0 40       	sbci	r29, 0x00	; 0
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
    2248:	fe 01       	movw	r30, r28
    224a:	e9 5a       	subi	r30, 0xA9	; 169
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	80 83       	st	Z, r24
	/*Sending UPPER Nibble of the command */
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D0,((Copy_u8Command>>4)&1));
    2250:	fe 01       	movw	r30, r28
    2252:	e9 5a       	subi	r30, 0xA9	; 169
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	80 81       	ld	r24, Z
    2258:	82 95       	swap	r24
    225a:	8f 70       	andi	r24, 0x0F	; 15
    225c:	98 2f       	mov	r25, r24
    225e:	91 70       	andi	r25, 0x01	; 1
    2260:	84 e0       	ldi	r24, 0x04	; 4
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	49 2f       	mov	r20, r25
    2266:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D1,((Copy_u8Command>>5)&1));
    226a:	fe 01       	movw	r30, r28
    226c:	e9 5a       	subi	r30, 0xA9	; 169
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	80 81       	ld	r24, Z
    2272:	82 95       	swap	r24
    2274:	86 95       	lsr	r24
    2276:	87 70       	andi	r24, 0x07	; 7
    2278:	98 2f       	mov	r25, r24
    227a:	91 70       	andi	r25, 0x01	; 1
    227c:	84 e0       	ldi	r24, 0x04	; 4
    227e:	61 e0       	ldi	r22, 0x01	; 1
    2280:	49 2f       	mov	r20, r25
    2282:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D2,((Copy_u8Command>>6)&1));
    2286:	fe 01       	movw	r30, r28
    2288:	e9 5a       	subi	r30, 0xA9	; 169
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	80 81       	ld	r24, Z
    228e:	82 95       	swap	r24
    2290:	86 95       	lsr	r24
    2292:	86 95       	lsr	r24
    2294:	83 70       	andi	r24, 0x03	; 3
    2296:	98 2f       	mov	r25, r24
    2298:	91 70       	andi	r25, 0x01	; 1
    229a:	84 e0       	ldi	r24, 0x04	; 4
    229c:	62 e0       	ldi	r22, 0x02	; 2
    229e:	49 2f       	mov	r20, r25
    22a0:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D3,((Copy_u8Command>>7)&1));
    22a4:	fe 01       	movw	r30, r28
    22a6:	e9 5a       	subi	r30, 0xA9	; 169
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	80 81       	ld	r24, Z
    22ac:	98 2f       	mov	r25, r24
    22ae:	99 1f       	adc	r25, r25
    22b0:	99 27       	eor	r25, r25
    22b2:	99 1f       	adc	r25, r25
    22b4:	84 e0       	ldi	r24, 0x04	; 4
    22b6:	63 e0       	ldi	r22, 0x03	; 3
    22b8:	49 2f       	mov	r20, r25
    22ba:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>

	/*	CLR RS to send command */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_LOW);
    22be:	83 e0       	ldi	r24, 0x03	; 3
    22c0:	60 e0       	ldi	r22, 0x00	; 0
    22c2:	40 e0       	ldi	r20, 0x00	; 0
    22c4:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	/*	CLR RS to Enable write */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW);
    22c8:	83 e0       	ldi	r24, 0x03	; 3
    22ca:	61 e0       	ldi	r22, 0x01	; 1
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>


	/* set EN for 2ms to make LCD CPU reads the command  */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    22d2:	83 e0       	ldi	r24, 0x03	; 3
    22d4:	62 e0       	ldi	r22, 0x02	; 2
    22d6:	41 e0       	ldi	r20, 0x01	; 1
    22d8:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
    22dc:	fe 01       	movw	r30, r28
    22de:	ed 5a       	subi	r30, 0xAD	; 173
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	a0 e8       	ldi	r26, 0x80	; 128
    22e8:	bf e3       	ldi	r27, 0x3F	; 63
    22ea:	80 83       	st	Z, r24
    22ec:	91 83       	std	Z+1, r25	; 0x01
    22ee:	a2 83       	std	Z+2, r26	; 0x02
    22f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22f2:	8e 01       	movw	r16, r28
    22f4:	01 5b       	subi	r16, 0xB1	; 177
    22f6:	1f 4f       	sbci	r17, 0xFF	; 255
    22f8:	fe 01       	movw	r30, r28
    22fa:	ed 5a       	subi	r30, 0xAD	; 173
    22fc:	ff 4f       	sbci	r31, 0xFF	; 255
    22fe:	60 81       	ld	r22, Z
    2300:	71 81       	ldd	r23, Z+1	; 0x01
    2302:	82 81       	ldd	r24, Z+2	; 0x02
    2304:	93 81       	ldd	r25, Z+3	; 0x03
    2306:	2b ea       	ldi	r18, 0xAB	; 171
    2308:	3a ea       	ldi	r19, 0xAA	; 170
    230a:	4a e2       	ldi	r20, 0x2A	; 42
    230c:	50 e4       	ldi	r21, 0x40	; 64
    230e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	f8 01       	movw	r30, r16
    2318:	80 83       	st	Z, r24
    231a:	91 83       	std	Z+1, r25	; 0x01
    231c:	a2 83       	std	Z+2, r26	; 0x02
    231e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2320:	fe 01       	movw	r30, r28
    2322:	e1 5b       	subi	r30, 0xB1	; 177
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	60 81       	ld	r22, Z
    2328:	71 81       	ldd	r23, Z+1	; 0x01
    232a:	82 81       	ldd	r24, Z+2	; 0x02
    232c:	93 81       	ldd	r25, Z+3	; 0x03
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    233a:	88 23       	and	r24, r24
    233c:	34 f4       	brge	.+12     	; 0x234a <HLCD_voidSendCommand+0x11c>
		__ticks = 1;
    233e:	fe 01       	movw	r30, r28
    2340:	e2 5b       	subi	r30, 0xB2	; 178
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	80 83       	st	Z, r24
    2348:	e0 c0       	rjmp	.+448    	; 0x250a <HLCD_voidSendCommand+0x2dc>
	else if (__tmp > 255)
    234a:	fe 01       	movw	r30, r28
    234c:	e1 5b       	subi	r30, 0xB1	; 177
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	60 81       	ld	r22, Z
    2352:	71 81       	ldd	r23, Z+1	; 0x01
    2354:	82 81       	ldd	r24, Z+2	; 0x02
    2356:	93 81       	ldd	r25, Z+3	; 0x03
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	4f e7       	ldi	r20, 0x7F	; 127
    235e:	53 e4       	ldi	r21, 0x43	; 67
    2360:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2364:	18 16       	cp	r1, r24
    2366:	0c f0       	brlt	.+2      	; 0x236a <HLCD_voidSendCommand+0x13c>
    2368:	c0 c0       	rjmp	.+384    	; 0x24ea <HLCD_voidSendCommand+0x2bc>
	{
		_delay_ms(__us / 1000.0);
    236a:	fe 01       	movw	r30, r28
    236c:	ed 5a       	subi	r30, 0xAD	; 173
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	60 81       	ld	r22, Z
    2372:	71 81       	ldd	r23, Z+1	; 0x01
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	4a e7       	ldi	r20, 0x7A	; 122
    237e:	54 e4       	ldi	r21, 0x44	; 68
    2380:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	fe 01       	movw	r30, r28
    238a:	e6 5b       	subi	r30, 0xB6	; 182
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 83       	st	Z, r24
    2390:	91 83       	std	Z+1, r25	; 0x01
    2392:	a2 83       	std	Z+2, r26	; 0x02
    2394:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2396:	8e 01       	movw	r16, r28
    2398:	0a 5b       	subi	r16, 0xBA	; 186
    239a:	1f 4f       	sbci	r17, 0xFF	; 255
    239c:	fe 01       	movw	r30, r28
    239e:	e6 5b       	subi	r30, 0xB6	; 182
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	60 81       	ld	r22, Z
    23a4:	71 81       	ldd	r23, Z+1	; 0x01
    23a6:	82 81       	ldd	r24, Z+2	; 0x02
    23a8:	93 81       	ldd	r25, Z+3	; 0x03
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	4a ef       	ldi	r20, 0xFA	; 250
    23b0:	54 e4       	ldi	r21, 0x44	; 68
    23b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	f8 01       	movw	r30, r16
    23bc:	80 83       	st	Z, r24
    23be:	91 83       	std	Z+1, r25	; 0x01
    23c0:	a2 83       	std	Z+2, r26	; 0x02
    23c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23c4:	fe 01       	movw	r30, r28
    23c6:	ea 5b       	subi	r30, 0xBA	; 186
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	60 81       	ld	r22, Z
    23cc:	71 81       	ldd	r23, Z+1	; 0x01
    23ce:	82 81       	ldd	r24, Z+2	; 0x02
    23d0:	93 81       	ldd	r25, Z+3	; 0x03
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e8       	ldi	r20, 0x80	; 128
    23d8:	5f e3       	ldi	r21, 0x3F	; 63
    23da:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23de:	88 23       	and	r24, r24
    23e0:	44 f4       	brge	.+16     	; 0x23f2 <HLCD_voidSendCommand+0x1c4>
		__ticks = 1;
    23e2:	fe 01       	movw	r30, r28
    23e4:	ec 5b       	subi	r30, 0xBC	; 188
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	91 83       	std	Z+1, r25	; 0x01
    23ee:	80 83       	st	Z, r24
    23f0:	64 c0       	rjmp	.+200    	; 0x24ba <HLCD_voidSendCommand+0x28c>
	else if (__tmp > 65535)
    23f2:	fe 01       	movw	r30, r28
    23f4:	ea 5b       	subi	r30, 0xBA	; 186
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	60 81       	ld	r22, Z
    23fa:	71 81       	ldd	r23, Z+1	; 0x01
    23fc:	82 81       	ldd	r24, Z+2	; 0x02
    23fe:	93 81       	ldd	r25, Z+3	; 0x03
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	3f ef       	ldi	r19, 0xFF	; 255
    2404:	4f e7       	ldi	r20, 0x7F	; 127
    2406:	57 e4       	ldi	r21, 0x47	; 71
    2408:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    240c:	18 16       	cp	r1, r24
    240e:	0c f0       	brlt	.+2      	; 0x2412 <HLCD_voidSendCommand+0x1e4>
    2410:	43 c0       	rjmp	.+134    	; 0x2498 <HLCD_voidSendCommand+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2412:	fe 01       	movw	r30, r28
    2414:	e6 5b       	subi	r30, 0xB6	; 182
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	60 81       	ld	r22, Z
    241a:	71 81       	ldd	r23, Z+1	; 0x01
    241c:	82 81       	ldd	r24, Z+2	; 0x02
    241e:	93 81       	ldd	r25, Z+3	; 0x03
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e2       	ldi	r20, 0x20	; 32
    2426:	51 e4       	ldi	r21, 0x41	; 65
    2428:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	8e 01       	movw	r16, r28
    2432:	0c 5b       	subi	r16, 0xBC	; 188
    2434:	1f 4f       	sbci	r17, 0xFF	; 255
    2436:	bc 01       	movw	r22, r24
    2438:	cd 01       	movw	r24, r26
    243a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	f8 01       	movw	r30, r16
    2444:	91 83       	std	Z+1, r25	; 0x01
    2446:	80 83       	st	Z, r24
    2448:	1f c0       	rjmp	.+62     	; 0x2488 <HLCD_voidSendCommand+0x25a>
    244a:	fe 01       	movw	r30, r28
    244c:	ee 5b       	subi	r30, 0xBE	; 190
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	88 ec       	ldi	r24, 0xC8	; 200
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	91 83       	std	Z+1, r25	; 0x01
    2456:	80 83       	st	Z, r24
    2458:	fe 01       	movw	r30, r28
    245a:	ee 5b       	subi	r30, 0xBE	; 190
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	80 81       	ld	r24, Z
    2460:	91 81       	ldd	r25, Z+1	; 0x01
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <HLCD_voidSendCommand+0x234>
    2466:	fe 01       	movw	r30, r28
    2468:	ee 5b       	subi	r30, 0xBE	; 190
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	91 83       	std	Z+1, r25	; 0x01
    246e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2470:	de 01       	movw	r26, r28
    2472:	ac 5b       	subi	r26, 0xBC	; 188
    2474:	bf 4f       	sbci	r27, 0xFF	; 255
    2476:	fe 01       	movw	r30, r28
    2478:	ec 5b       	subi	r30, 0xBC	; 188
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	80 81       	ld	r24, Z
    247e:	91 81       	ldd	r25, Z+1	; 0x01
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	11 96       	adiw	r26, 0x01	; 1
    2484:	9c 93       	st	X, r25
    2486:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2488:	fe 01       	movw	r30, r28
    248a:	ec 5b       	subi	r30, 0xBC	; 188
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 81       	ld	r24, Z
    2490:	91 81       	ldd	r25, Z+1	; 0x01
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	d1 f6       	brne	.-76     	; 0x244a <HLCD_voidSendCommand+0x21c>
    2496:	42 c0       	rjmp	.+132    	; 0x251c <HLCD_voidSendCommand+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2498:	8e 01       	movw	r16, r28
    249a:	0c 5b       	subi	r16, 0xBC	; 188
    249c:	1f 4f       	sbci	r17, 0xFF	; 255
    249e:	fe 01       	movw	r30, r28
    24a0:	ea 5b       	subi	r30, 0xBA	; 186
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	60 81       	ld	r22, Z
    24a6:	71 81       	ldd	r23, Z+1	; 0x01
    24a8:	82 81       	ldd	r24, Z+2	; 0x02
    24aa:	93 81       	ldd	r25, Z+3	; 0x03
    24ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	f8 01       	movw	r30, r16
    24b6:	91 83       	std	Z+1, r25	; 0x01
    24b8:	80 83       	st	Z, r24
    24ba:	de 01       	movw	r26, r28
    24bc:	a0 5c       	subi	r26, 0xC0	; 192
    24be:	bf 4f       	sbci	r27, 0xFF	; 255
    24c0:	fe 01       	movw	r30, r28
    24c2:	ec 5b       	subi	r30, 0xBC	; 188
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	80 81       	ld	r24, Z
    24c8:	91 81       	ldd	r25, Z+1	; 0x01
    24ca:	11 96       	adiw	r26, 0x01	; 1
    24cc:	9c 93       	st	X, r25
    24ce:	8e 93       	st	-X, r24
    24d0:	fe 01       	movw	r30, r28
    24d2:	e0 5c       	subi	r30, 0xC0	; 192
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	80 81       	ld	r24, Z
    24d8:	91 81       	ldd	r25, Z+1	; 0x01
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <HLCD_voidSendCommand+0x2ac>
    24de:	fe 01       	movw	r30, r28
    24e0:	e0 5c       	subi	r30, 0xC0	; 192
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	91 83       	std	Z+1, r25	; 0x01
    24e6:	80 83       	st	Z, r24
    24e8:	19 c0       	rjmp	.+50     	; 0x251c <HLCD_voidSendCommand+0x2ee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24ea:	8e 01       	movw	r16, r28
    24ec:	02 5b       	subi	r16, 0xB2	; 178
    24ee:	1f 4f       	sbci	r17, 0xFF	; 255
    24f0:	fe 01       	movw	r30, r28
    24f2:	e1 5b       	subi	r30, 0xB1	; 177
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	60 81       	ld	r22, Z
    24f8:	71 81       	ldd	r23, Z+1	; 0x01
    24fa:	82 81       	ldd	r24, Z+2	; 0x02
    24fc:	93 81       	ldd	r25, Z+3	; 0x03
    24fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	f8 01       	movw	r30, r16
    2508:	80 83       	st	Z, r24
    250a:	fe 01       	movw	r30, r28
    250c:	e2 5b       	subi	r30, 0xB2	; 178
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	80 81       	ld	r24, Z
    2512:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2514:	8f ad       	ldd	r24, Y+63	; 0x3f
    2516:	8a 95       	dec	r24
    2518:	f1 f7       	brne	.-4      	; 0x2516 <HLCD_voidSendCommand+0x2e8>
    251a:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    251c:	83 e0       	ldi	r24, 0x03	; 3
    251e:	62 e0       	ldi	r22, 0x02	; 2
    2520:	40 e0       	ldi	r20, 0x00	; 0
    2522:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	a8 e4       	ldi	r26, 0x48	; 72
    252c:	b3 e4       	ldi	r27, 0x43	; 67
    252e:	8b af       	std	Y+59, r24	; 0x3b
    2530:	9c af       	std	Y+60, r25	; 0x3c
    2532:	ad af       	std	Y+61, r26	; 0x3d
    2534:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2536:	6b ad       	ldd	r22, Y+59	; 0x3b
    2538:	7c ad       	ldd	r23, Y+60	; 0x3c
    253a:	8d ad       	ldd	r24, Y+61	; 0x3d
    253c:	9e ad       	ldd	r25, Y+62	; 0x3e
    253e:	2b ea       	ldi	r18, 0xAB	; 171
    2540:	3a ea       	ldi	r19, 0xAA	; 170
    2542:	4a e2       	ldi	r20, 0x2A	; 42
    2544:	50 e4       	ldi	r21, 0x40	; 64
    2546:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	8f ab       	std	Y+55, r24	; 0x37
    2550:	98 af       	std	Y+56, r25	; 0x38
    2552:	a9 af       	std	Y+57, r26	; 0x39
    2554:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2556:	6f a9       	ldd	r22, Y+55	; 0x37
    2558:	78 ad       	ldd	r23, Y+56	; 0x38
    255a:	89 ad       	ldd	r24, Y+57	; 0x39
    255c:	9a ad       	ldd	r25, Y+58	; 0x3a
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e8       	ldi	r20, 0x80	; 128
    2564:	5f e3       	ldi	r21, 0x3F	; 63
    2566:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    256a:	88 23       	and	r24, r24
    256c:	1c f4       	brge	.+6      	; 0x2574 <HLCD_voidSendCommand+0x346>
		__ticks = 1;
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	8e ab       	std	Y+54, r24	; 0x36
    2572:	91 c0       	rjmp	.+290    	; 0x2696 <HLCD_voidSendCommand+0x468>
	else if (__tmp > 255)
    2574:	6f a9       	ldd	r22, Y+55	; 0x37
    2576:	78 ad       	ldd	r23, Y+56	; 0x38
    2578:	89 ad       	ldd	r24, Y+57	; 0x39
    257a:	9a ad       	ldd	r25, Y+58	; 0x3a
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	4f e7       	ldi	r20, 0x7F	; 127
    2582:	53 e4       	ldi	r21, 0x43	; 67
    2584:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2588:	18 16       	cp	r1, r24
    258a:	0c f0       	brlt	.+2      	; 0x258e <HLCD_voidSendCommand+0x360>
    258c:	7b c0       	rjmp	.+246    	; 0x2684 <HLCD_voidSendCommand+0x456>
	{
		_delay_ms(__us / 1000.0);
    258e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2590:	7c ad       	ldd	r23, Y+60	; 0x3c
    2592:	8d ad       	ldd	r24, Y+61	; 0x3d
    2594:	9e ad       	ldd	r25, Y+62	; 0x3e
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	4a e7       	ldi	r20, 0x7A	; 122
    259c:	54 e4       	ldi	r21, 0x44	; 68
    259e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	8a ab       	std	Y+50, r24	; 0x32
    25a8:	9b ab       	std	Y+51, r25	; 0x33
    25aa:	ac ab       	std	Y+52, r26	; 0x34
    25ac:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ae:	6a a9       	ldd	r22, Y+50	; 0x32
    25b0:	7b a9       	ldd	r23, Y+51	; 0x33
    25b2:	8c a9       	ldd	r24, Y+52	; 0x34
    25b4:	9d a9       	ldd	r25, Y+53	; 0x35
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	4a ef       	ldi	r20, 0xFA	; 250
    25bc:	54 e4       	ldi	r21, 0x44	; 68
    25be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	8e a7       	std	Y+46, r24	; 0x2e
    25c8:	9f a7       	std	Y+47, r25	; 0x2f
    25ca:	a8 ab       	std	Y+48, r26	; 0x30
    25cc:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    25ce:	6e a5       	ldd	r22, Y+46	; 0x2e
    25d0:	7f a5       	ldd	r23, Y+47	; 0x2f
    25d2:	88 a9       	ldd	r24, Y+48	; 0x30
    25d4:	99 a9       	ldd	r25, Y+49	; 0x31
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e8       	ldi	r20, 0x80	; 128
    25dc:	5f e3       	ldi	r21, 0x3F	; 63
    25de:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25e2:	88 23       	and	r24, r24
    25e4:	2c f4       	brge	.+10     	; 0x25f0 <HLCD_voidSendCommand+0x3c2>
		__ticks = 1;
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	9d a7       	std	Y+45, r25	; 0x2d
    25ec:	8c a7       	std	Y+44, r24	; 0x2c
    25ee:	3f c0       	rjmp	.+126    	; 0x266e <HLCD_voidSendCommand+0x440>
	else if (__tmp > 65535)
    25f0:	6e a5       	ldd	r22, Y+46	; 0x2e
    25f2:	7f a5       	ldd	r23, Y+47	; 0x2f
    25f4:	88 a9       	ldd	r24, Y+48	; 0x30
    25f6:	99 a9       	ldd	r25, Y+49	; 0x31
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	3f ef       	ldi	r19, 0xFF	; 255
    25fc:	4f e7       	ldi	r20, 0x7F	; 127
    25fe:	57 e4       	ldi	r21, 0x47	; 71
    2600:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2604:	18 16       	cp	r1, r24
    2606:	4c f5       	brge	.+82     	; 0x265a <HLCD_voidSendCommand+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2608:	6a a9       	ldd	r22, Y+50	; 0x32
    260a:	7b a9       	ldd	r23, Y+51	; 0x33
    260c:	8c a9       	ldd	r24, Y+52	; 0x34
    260e:	9d a9       	ldd	r25, Y+53	; 0x35
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e2       	ldi	r20, 0x20	; 32
    2616:	51 e4       	ldi	r21, 0x41	; 65
    2618:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	bc 01       	movw	r22, r24
    2622:	cd 01       	movw	r24, r26
    2624:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	9d a7       	std	Y+45, r25	; 0x2d
    262e:	8c a7       	std	Y+44, r24	; 0x2c
    2630:	0f c0       	rjmp	.+30     	; 0x2650 <HLCD_voidSendCommand+0x422>
    2632:	88 ec       	ldi	r24, 0xC8	; 200
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	9b a7       	std	Y+43, r25	; 0x2b
    2638:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    263a:	8a a5       	ldd	r24, Y+42	; 0x2a
    263c:	9b a5       	ldd	r25, Y+43	; 0x2b
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <HLCD_voidSendCommand+0x410>
    2642:	9b a7       	std	Y+43, r25	; 0x2b
    2644:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2646:	8c a5       	ldd	r24, Y+44	; 0x2c
    2648:	9d a5       	ldd	r25, Y+45	; 0x2d
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	9d a7       	std	Y+45, r25	; 0x2d
    264e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2650:	8c a5       	ldd	r24, Y+44	; 0x2c
    2652:	9d a5       	ldd	r25, Y+45	; 0x2d
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	69 f7       	brne	.-38     	; 0x2632 <HLCD_voidSendCommand+0x404>
    2658:	24 c0       	rjmp	.+72     	; 0x26a2 <HLCD_voidSendCommand+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265a:	6e a5       	ldd	r22, Y+46	; 0x2e
    265c:	7f a5       	ldd	r23, Y+47	; 0x2f
    265e:	88 a9       	ldd	r24, Y+48	; 0x30
    2660:	99 a9       	ldd	r25, Y+49	; 0x31
    2662:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	9d a7       	std	Y+45, r25	; 0x2d
    266c:	8c a7       	std	Y+44, r24	; 0x2c
    266e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2670:	9d a5       	ldd	r25, Y+45	; 0x2d
    2672:	99 a7       	std	Y+41, r25	; 0x29
    2674:	88 a7       	std	Y+40, r24	; 0x28
    2676:	88 a5       	ldd	r24, Y+40	; 0x28
    2678:	99 a5       	ldd	r25, Y+41	; 0x29
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <HLCD_voidSendCommand+0x44c>
    267e:	99 a7       	std	Y+41, r25	; 0x29
    2680:	88 a7       	std	Y+40, r24	; 0x28
    2682:	0f c0       	rjmp	.+30     	; 0x26a2 <HLCD_voidSendCommand+0x474>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2684:	6f a9       	ldd	r22, Y+55	; 0x37
    2686:	78 ad       	ldd	r23, Y+56	; 0x38
    2688:	89 ad       	ldd	r24, Y+57	; 0x39
    268a:	9a ad       	ldd	r25, Y+58	; 0x3a
    268c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	8e ab       	std	Y+54, r24	; 0x36
    2696:	8e a9       	ldd	r24, Y+54	; 0x36
    2698:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    269a:	8f a1       	ldd	r24, Y+39	; 0x27
    269c:	8a 95       	dec	r24
    269e:	f1 f7       	brne	.-4      	; 0x269c <HLCD_voidSendCommand+0x46e>
    26a0:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);

	/*Sending LAST Nibble of the command */
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D0,((Copy_u8Command>>0)&1));
    26a2:	fe 01       	movw	r30, r28
    26a4:	e9 5a       	subi	r30, 0xA9	; 169
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	80 81       	ld	r24, Z
    26aa:	98 2f       	mov	r25, r24
    26ac:	91 70       	andi	r25, 0x01	; 1
    26ae:	84 e0       	ldi	r24, 0x04	; 4
    26b0:	60 e0       	ldi	r22, 0x00	; 0
    26b2:	49 2f       	mov	r20, r25
    26b4:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D1,((Copy_u8Command>>1)&1));
    26b8:	fe 01       	movw	r30, r28
    26ba:	e9 5a       	subi	r30, 0xA9	; 169
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	80 81       	ld	r24, Z
    26c0:	86 95       	lsr	r24
    26c2:	98 2f       	mov	r25, r24
    26c4:	91 70       	andi	r25, 0x01	; 1
    26c6:	84 e0       	ldi	r24, 0x04	; 4
    26c8:	61 e0       	ldi	r22, 0x01	; 1
    26ca:	49 2f       	mov	r20, r25
    26cc:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D2,((Copy_u8Command>>2)&1));
    26d0:	fe 01       	movw	r30, r28
    26d2:	e9 5a       	subi	r30, 0xA9	; 169
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	80 81       	ld	r24, Z
    26d8:	86 95       	lsr	r24
    26da:	86 95       	lsr	r24
    26dc:	98 2f       	mov	r25, r24
    26de:	91 70       	andi	r25, 0x01	; 1
    26e0:	84 e0       	ldi	r24, 0x04	; 4
    26e2:	62 e0       	ldi	r22, 0x02	; 2
    26e4:	49 2f       	mov	r20, r25
    26e6:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D3,((Copy_u8Command>>3)&1));
    26ea:	fe 01       	movw	r30, r28
    26ec:	e9 5a       	subi	r30, 0xA9	; 169
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	80 81       	ld	r24, Z
    26f2:	86 95       	lsr	r24
    26f4:	86 95       	lsr	r24
    26f6:	86 95       	lsr	r24
    26f8:	98 2f       	mov	r25, r24
    26fa:	91 70       	andi	r25, 0x01	; 1
    26fc:	84 e0       	ldi	r24, 0x04	; 4
    26fe:	63 e0       	ldi	r22, 0x03	; 3
    2700:	49 2f       	mov	r20, r25
    2702:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>

	/* set EN for 2ms to make LCD CPU reads the command  */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    2706:	83 e0       	ldi	r24, 0x03	; 3
    2708:	62 e0       	ldi	r22, 0x02	; 2
    270a:	41 e0       	ldi	r20, 0x01	; 1
    270c:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	a0 e8       	ldi	r26, 0x80	; 128
    2716:	bf e3       	ldi	r27, 0x3F	; 63
    2718:	8b a3       	std	Y+35, r24	; 0x23
    271a:	9c a3       	std	Y+36, r25	; 0x24
    271c:	ad a3       	std	Y+37, r26	; 0x25
    271e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2720:	6b a1       	ldd	r22, Y+35	; 0x23
    2722:	7c a1       	ldd	r23, Y+36	; 0x24
    2724:	8d a1       	ldd	r24, Y+37	; 0x25
    2726:	9e a1       	ldd	r25, Y+38	; 0x26
    2728:	2b ea       	ldi	r18, 0xAB	; 171
    272a:	3a ea       	ldi	r19, 0xAA	; 170
    272c:	4a e2       	ldi	r20, 0x2A	; 42
    272e:	50 e4       	ldi	r21, 0x40	; 64
    2730:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	8f 8f       	std	Y+31, r24	; 0x1f
    273a:	98 a3       	std	Y+32, r25	; 0x20
    273c:	a9 a3       	std	Y+33, r26	; 0x21
    273e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2740:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2742:	78 a1       	ldd	r23, Y+32	; 0x20
    2744:	89 a1       	ldd	r24, Y+33	; 0x21
    2746:	9a a1       	ldd	r25, Y+34	; 0x22
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e8       	ldi	r20, 0x80	; 128
    274e:	5f e3       	ldi	r21, 0x3F	; 63
    2750:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2754:	88 23       	and	r24, r24
    2756:	1c f4       	brge	.+6      	; 0x275e <HLCD_voidSendCommand+0x530>
		__ticks = 1;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	8e 8f       	std	Y+30, r24	; 0x1e
    275c:	91 c0       	rjmp	.+290    	; 0x2880 <HLCD_voidSendCommand+0x652>
	else if (__tmp > 255)
    275e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2760:	78 a1       	ldd	r23, Y+32	; 0x20
    2762:	89 a1       	ldd	r24, Y+33	; 0x21
    2764:	9a a1       	ldd	r25, Y+34	; 0x22
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	4f e7       	ldi	r20, 0x7F	; 127
    276c:	53 e4       	ldi	r21, 0x43	; 67
    276e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2772:	18 16       	cp	r1, r24
    2774:	0c f0       	brlt	.+2      	; 0x2778 <HLCD_voidSendCommand+0x54a>
    2776:	7b c0       	rjmp	.+246    	; 0x286e <HLCD_voidSendCommand+0x640>
	{
		_delay_ms(__us / 1000.0);
    2778:	6b a1       	ldd	r22, Y+35	; 0x23
    277a:	7c a1       	ldd	r23, Y+36	; 0x24
    277c:	8d a1       	ldd	r24, Y+37	; 0x25
    277e:	9e a1       	ldd	r25, Y+38	; 0x26
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	4a e7       	ldi	r20, 0x7A	; 122
    2786:	54 e4       	ldi	r21, 0x44	; 68
    2788:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	8a 8f       	std	Y+26, r24	; 0x1a
    2792:	9b 8f       	std	Y+27, r25	; 0x1b
    2794:	ac 8f       	std	Y+28, r26	; 0x1c
    2796:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2798:	6a 8d       	ldd	r22, Y+26	; 0x1a
    279a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    279c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    279e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	4a ef       	ldi	r20, 0xFA	; 250
    27a6:	54 e4       	ldi	r21, 0x44	; 68
    27a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	8e 8b       	std	Y+22, r24	; 0x16
    27b2:	9f 8b       	std	Y+23, r25	; 0x17
    27b4:	a8 8f       	std	Y+24, r26	; 0x18
    27b6:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    27b8:	6e 89       	ldd	r22, Y+22	; 0x16
    27ba:	7f 89       	ldd	r23, Y+23	; 0x17
    27bc:	88 8d       	ldd	r24, Y+24	; 0x18
    27be:	99 8d       	ldd	r25, Y+25	; 0x19
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e8       	ldi	r20, 0x80	; 128
    27c6:	5f e3       	ldi	r21, 0x3F	; 63
    27c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27cc:	88 23       	and	r24, r24
    27ce:	2c f4       	brge	.+10     	; 0x27da <HLCD_voidSendCommand+0x5ac>
		__ticks = 1;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	9d 8b       	std	Y+21, r25	; 0x15
    27d6:	8c 8b       	std	Y+20, r24	; 0x14
    27d8:	3f c0       	rjmp	.+126    	; 0x2858 <HLCD_voidSendCommand+0x62a>
	else if (__tmp > 65535)
    27da:	6e 89       	ldd	r22, Y+22	; 0x16
    27dc:	7f 89       	ldd	r23, Y+23	; 0x17
    27de:	88 8d       	ldd	r24, Y+24	; 0x18
    27e0:	99 8d       	ldd	r25, Y+25	; 0x19
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	3f ef       	ldi	r19, 0xFF	; 255
    27e6:	4f e7       	ldi	r20, 0x7F	; 127
    27e8:	57 e4       	ldi	r21, 0x47	; 71
    27ea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27ee:	18 16       	cp	r1, r24
    27f0:	4c f5       	brge	.+82     	; 0x2844 <HLCD_voidSendCommand+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    27f4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    27f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e2       	ldi	r20, 0x20	; 32
    2800:	51 e4       	ldi	r21, 0x41	; 65
    2802:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	bc 01       	movw	r22, r24
    280c:	cd 01       	movw	r24, r26
    280e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	9d 8b       	std	Y+21, r25	; 0x15
    2818:	8c 8b       	std	Y+20, r24	; 0x14
    281a:	0f c0       	rjmp	.+30     	; 0x283a <HLCD_voidSendCommand+0x60c>
    281c:	88 ec       	ldi	r24, 0xC8	; 200
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	9b 8b       	std	Y+19, r25	; 0x13
    2822:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2824:	8a 89       	ldd	r24, Y+18	; 0x12
    2826:	9b 89       	ldd	r25, Y+19	; 0x13
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <HLCD_voidSendCommand+0x5fa>
    282c:	9b 8b       	std	Y+19, r25	; 0x13
    282e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2830:	8c 89       	ldd	r24, Y+20	; 0x14
    2832:	9d 89       	ldd	r25, Y+21	; 0x15
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	9d 8b       	std	Y+21, r25	; 0x15
    2838:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283a:	8c 89       	ldd	r24, Y+20	; 0x14
    283c:	9d 89       	ldd	r25, Y+21	; 0x15
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	69 f7       	brne	.-38     	; 0x281c <HLCD_voidSendCommand+0x5ee>
    2842:	24 c0       	rjmp	.+72     	; 0x288c <HLCD_voidSendCommand+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2844:	6e 89       	ldd	r22, Y+22	; 0x16
    2846:	7f 89       	ldd	r23, Y+23	; 0x17
    2848:	88 8d       	ldd	r24, Y+24	; 0x18
    284a:	99 8d       	ldd	r25, Y+25	; 0x19
    284c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	9d 8b       	std	Y+21, r25	; 0x15
    2856:	8c 8b       	std	Y+20, r24	; 0x14
    2858:	8c 89       	ldd	r24, Y+20	; 0x14
    285a:	9d 89       	ldd	r25, Y+21	; 0x15
    285c:	99 8b       	std	Y+17, r25	; 0x11
    285e:	88 8b       	std	Y+16, r24	; 0x10
    2860:	88 89       	ldd	r24, Y+16	; 0x10
    2862:	99 89       	ldd	r25, Y+17	; 0x11
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <HLCD_voidSendCommand+0x636>
    2868:	99 8b       	std	Y+17, r25	; 0x11
    286a:	88 8b       	std	Y+16, r24	; 0x10
    286c:	0f c0       	rjmp	.+30     	; 0x288c <HLCD_voidSendCommand+0x65e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    286e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2870:	78 a1       	ldd	r23, Y+32	; 0x20
    2872:	89 a1       	ldd	r24, Y+33	; 0x21
    2874:	9a a1       	ldd	r25, Y+34	; 0x22
    2876:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	8e 8f       	std	Y+30, r24	; 0x1e
    2880:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2882:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2884:	8f 85       	ldd	r24, Y+15	; 0x0f
    2886:	8a 95       	dec	r24
    2888:	f1 f7       	brne	.-4      	; 0x2886 <HLCD_voidSendCommand+0x658>
    288a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    288c:	83 e0       	ldi	r24, 0x03	; 3
    288e:	62 e0       	ldi	r22, 0x02	; 2
    2890:	40 e0       	ldi	r20, 0x00	; 0
    2892:	0e 94 00 17 	call	0x2e00	; 0x2e00 <MDIO_ErrorS_SetPinValue>
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	a0 e0       	ldi	r26, 0x00	; 0
    289c:	b0 e4       	ldi	r27, 0x40	; 64
    289e:	8b 87       	std	Y+11, r24	; 0x0b
    28a0:	9c 87       	std	Y+12, r25	; 0x0c
    28a2:	ad 87       	std	Y+13, r26	; 0x0d
    28a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	4a ef       	ldi	r20, 0xFA	; 250
    28b4:	54 e4       	ldi	r21, 0x44	; 68
    28b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	8f 83       	std	Y+7, r24	; 0x07
    28c0:	98 87       	std	Y+8, r25	; 0x08
    28c2:	a9 87       	std	Y+9, r26	; 0x09
    28c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28c6:	6f 81       	ldd	r22, Y+7	; 0x07
    28c8:	78 85       	ldd	r23, Y+8	; 0x08
    28ca:	89 85       	ldd	r24, Y+9	; 0x09
    28cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	40 e8       	ldi	r20, 0x80	; 128
    28d4:	5f e3       	ldi	r21, 0x3F	; 63
    28d6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28da:	88 23       	and	r24, r24
    28dc:	2c f4       	brge	.+10     	; 0x28e8 <HLCD_voidSendCommand+0x6ba>
		__ticks = 1;
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	9e 83       	std	Y+6, r25	; 0x06
    28e4:	8d 83       	std	Y+5, r24	; 0x05
    28e6:	3f c0       	rjmp	.+126    	; 0x2966 <HLCD_voidSendCommand+0x738>
	else if (__tmp > 65535)
    28e8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ea:	78 85       	ldd	r23, Y+8	; 0x08
    28ec:	89 85       	ldd	r24, Y+9	; 0x09
    28ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	3f ef       	ldi	r19, 0xFF	; 255
    28f4:	4f e7       	ldi	r20, 0x7F	; 127
    28f6:	57 e4       	ldi	r21, 0x47	; 71
    28f8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28fc:	18 16       	cp	r1, r24
    28fe:	4c f5       	brge	.+82     	; 0x2952 <HLCD_voidSendCommand+0x724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2900:	6b 85       	ldd	r22, Y+11	; 0x0b
    2902:	7c 85       	ldd	r23, Y+12	; 0x0c
    2904:	8d 85       	ldd	r24, Y+13	; 0x0d
    2906:	9e 85       	ldd	r25, Y+14	; 0x0e
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e2       	ldi	r20, 0x20	; 32
    290e:	51 e4       	ldi	r21, 0x41	; 65
    2910:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	bc 01       	movw	r22, r24
    291a:	cd 01       	movw	r24, r26
    291c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
    2928:	0f c0       	rjmp	.+30     	; 0x2948 <HLCD_voidSendCommand+0x71a>
    292a:	88 ec       	ldi	r24, 0xC8	; 200
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	9c 83       	std	Y+4, r25	; 0x04
    2930:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2932:	8b 81       	ldd	r24, Y+3	; 0x03
    2934:	9c 81       	ldd	r25, Y+4	; 0x04
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	f1 f7       	brne	.-4      	; 0x2936 <HLCD_voidSendCommand+0x708>
    293a:	9c 83       	std	Y+4, r25	; 0x04
    293c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    293e:	8d 81       	ldd	r24, Y+5	; 0x05
    2940:	9e 81       	ldd	r25, Y+6	; 0x06
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	9e 83       	std	Y+6, r25	; 0x06
    2946:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2948:	8d 81       	ldd	r24, Y+5	; 0x05
    294a:	9e 81       	ldd	r25, Y+6	; 0x06
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	69 f7       	brne	.-38     	; 0x292a <HLCD_voidSendCommand+0x6fc>
    2950:	14 c0       	rjmp	.+40     	; 0x297a <HLCD_voidSendCommand+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2952:	6f 81       	ldd	r22, Y+7	; 0x07
    2954:	78 85       	ldd	r23, Y+8	; 0x08
    2956:	89 85       	ldd	r24, Y+9	; 0x09
    2958:	9a 85       	ldd	r25, Y+10	; 0x0a
    295a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	9e 83       	std	Y+6, r25	; 0x06
    2964:	8d 83       	std	Y+5, r24	; 0x05
    2966:	8d 81       	ldd	r24, Y+5	; 0x05
    2968:	9e 81       	ldd	r25, Y+6	; 0x06
    296a:	9a 83       	std	Y+2, r25	; 0x02
    296c:	89 83       	std	Y+1, r24	; 0x01
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	9a 81       	ldd	r25, Y+2	; 0x02
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	f1 f7       	brne	.-4      	; 0x2972 <HLCD_voidSendCommand+0x744>
    2976:	9a 83       	std	Y+2, r25	; 0x02
    2978:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    297a:	c9 5a       	subi	r28, 0xA9	; 169
    297c:	df 4f       	sbci	r29, 0xFF	; 255
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	cf 91       	pop	r28
    298a:	df 91       	pop	r29
    298c:	1f 91       	pop	r17
    298e:	0f 91       	pop	r16
    2990:	08 95       	ret

00002992 <HLCD_voidSendString>:


void HLCD_voidSendString(s8 Copy_u8Data[]){
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	00 d0       	rcall	.+0      	; 0x2998 <HLCD_voidSendString+0x6>
    2998:	00 d0       	rcall	.+0      	; 0x299a <HLCD_voidSendString+0x8>
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	9c 83       	std	Y+4, r25	; 0x04
    29a0:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0 ;
    29a2:	1a 82       	std	Y+2, r1	; 0x02
    29a4:	19 82       	std	Y+1, r1	; 0x01
    29a6:	0f c0       	rjmp	.+30     	; 0x29c6 <HLCD_voidSendString+0x34>
	while (Copy_u8Data[i]!='\0'){
		HLCD_voidSendData(Copy_u8Data[i]);
    29a8:	29 81       	ldd	r18, Y+1	; 0x01
    29aa:	3a 81       	ldd	r19, Y+2	; 0x02
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	9c 81       	ldd	r25, Y+4	; 0x04
    29b0:	fc 01       	movw	r30, r24
    29b2:	e2 0f       	add	r30, r18
    29b4:	f3 1f       	adc	r31, r19
    29b6:	80 81       	ld	r24, Z
    29b8:	0e 94 65 0d 	call	0x1aca	; 0x1aca <HLCD_voidSendData>
		i++;
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	9a 81       	ldd	r25, Y+2	; 0x02
    29c0:	01 96       	adiw	r24, 0x01	; 1
    29c2:	9a 83       	std	Y+2, r25	; 0x02
    29c4:	89 83       	std	Y+1, r24	; 0x01
}


void HLCD_voidSendString(s8 Copy_u8Data[]){
	int i = 0 ;
	while (Copy_u8Data[i]!='\0'){
    29c6:	29 81       	ldd	r18, Y+1	; 0x01
    29c8:	3a 81       	ldd	r19, Y+2	; 0x02
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	9c 81       	ldd	r25, Y+4	; 0x04
    29ce:	fc 01       	movw	r30, r24
    29d0:	e2 0f       	add	r30, r18
    29d2:	f3 1f       	adc	r31, r19
    29d4:	80 81       	ld	r24, Z
    29d6:	88 23       	and	r24, r24
    29d8:	39 f7       	brne	.-50     	; 0x29a8 <HLCD_voidSendString+0x16>
		HLCD_voidSendData(Copy_u8Data[i]);
		i++;
	}
}
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	0f 90       	pop	r0
    29e2:	cf 91       	pop	r28
    29e4:	df 91       	pop	r29
    29e6:	08 95       	ret

000029e8 <HLCD_voidSendInt>:

void HLCD_voidSendInt(s32 Copy_u32Data){
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
    29f0:	68 97       	sbiw	r28, 0x18	; 24
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	cd bf       	out	0x3d, r28	; 61
    29fc:	6d 8b       	std	Y+21, r22	; 0x15
    29fe:	7e 8b       	std	Y+22, r23	; 0x16
    2a00:	8f 8b       	std	Y+23, r24	; 0x17
    2a02:	98 8f       	std	Y+24, r25	; 0x18
	s8 s[20];
	itoa(Copy_u32Data, s, 10);
    2a04:	8d 89       	ldd	r24, Y+21	; 0x15
    2a06:	9e 89       	ldd	r25, Y+22	; 0x16
    2a08:	9e 01       	movw	r18, r28
    2a0a:	2f 5f       	subi	r18, 0xFF	; 255
    2a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0e:	b9 01       	movw	r22, r18
    2a10:	4a e0       	ldi	r20, 0x0A	; 10
    2a12:	50 e0       	ldi	r21, 0x00	; 0
    2a14:	0e 94 07 1a 	call	0x340e	; 0x340e <itoa>
	HLCD_voidSendString(s);
    2a18:	ce 01       	movw	r24, r28
    2a1a:	01 96       	adiw	r24, 0x01	; 1
    2a1c:	0e 94 c9 14 	call	0x2992	; 0x2992 <HLCD_voidSendString>
}
    2a20:	68 96       	adiw	r28, 0x18	; 24
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	cf 91       	pop	r28
    2a2e:	df 91       	pop	r29
    2a30:	08 95       	ret

00002a32 <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(){
    2a32:	df 93       	push	r29
    2a34:	cf 93       	push	r28
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(0b00000001);
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	0e 94 17 11 	call	0x222e	; 0x222e <HLCD_voidSendCommand>

}
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <HLCD_voidReturnHome>:

void HLCD_voidReturnHome(){
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(0b00000010);
    2a4e:	82 e0       	ldi	r24, 0x02	; 2
    2a50:	0e 94 17 11 	call	0x222e	; 0x222e <HLCD_voidSendCommand>
}
    2a54:	cf 91       	pop	r28
    2a56:	df 91       	pop	r29
    2a58:	08 95       	ret

00002a5a <HLCD_voidSetCursorPosition>:

void HLCD_voidSetCursorPosition(u8 x , u8 y){
    2a5a:	df 93       	push	r29
    2a5c:	cf 93       	push	r28
    2a5e:	00 d0       	rcall	.+0      	; 0x2a60 <HLCD_voidSetCursorPosition+0x6>
    2a60:	0f 92       	push	r0
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	8a 83       	std	Y+2, r24	; 0x02
    2a68:	6b 83       	std	Y+3, r22	; 0x03
	u8 command = 0b10000000;
    2a6a:	80 e8       	ldi	r24, 0x80	; 128
    2a6c:	89 83       	std	Y+1, r24	; 0x01
	if (x == 2) command  |=0x40 ;
    2a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a70:	82 30       	cpi	r24, 0x02	; 2
    2a72:	19 f4       	brne	.+6      	; 0x2a7a <HLCD_voidSetCursorPosition+0x20>
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	80 64       	ori	r24, 0x40	; 64
    2a78:	89 83       	std	Y+1, r24	; 0x01
	command  +=y ;
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a7e:	89 0f       	add	r24, r25
    2a80:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidSendCommand(command);
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	0e 94 17 11 	call	0x222e	; 0x222e <HLCD_voidSendCommand>
}
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	08 95       	ret

00002a94 <Port_voidInit>:
#include "MDIO_interface.h"
#include "MDIO_registers.h"
#include "MDIO_private.h"
#include "MDIO_config.h"

void Port_voidInit(void){
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62

	DDRA = PORTA_DIR;
    2a9c:	ea e3       	ldi	r30, 0x3A	; 58
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	8f ef       	ldi	r24, 0xFF	; 255
    2aa2:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    2aa4:	e7 e3       	ldi	r30, 0x37	; 55
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	8f ef       	ldi	r24, 0xFF	; 255
    2aaa:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    2aac:	e4 e3       	ldi	r30, 0x34	; 52
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	8f ef       	ldi	r24, 0xFF	; 255
    2ab2:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    2ab4:	e1 e3       	ldi	r30, 0x31	; 49
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	8f ef       	ldi	r24, 0xFF	; 255
    2aba:	80 83       	st	Z, r24
	PORTA = PORTA_INITAL_VAL;
    2abc:	eb e3       	ldi	r30, 0x3B	; 59
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	10 82       	st	Z, r1
	PORTB = PORTB_INITAL_VAL;
    2ac2:	e8 e3       	ldi	r30, 0x38	; 56
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	10 82       	st	Z, r1
	PORTC = PORTC_INITAL_VAL;
    2ac8:	e5 e3       	ldi	r30, 0x35	; 53
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	10 82       	st	Z, r1
	PORTD = PORTD_INITAL_VAL;
    2ace:	e2 e3       	ldi	r30, 0x32	; 50
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	10 82       	st	Z, r1





}
    2ad4:	cf 91       	pop	r28
    2ad6:	df 91       	pop	r29
    2ad8:	08 95       	ret

00002ada <MDIO_ErrorS_EnablePinPullUp>:
Error_State_t MDIO_ErrorS_EnablePinPullUp( u8 Copy_u8Port , u8 Copy_u8Pin){
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	00 d0       	rcall	.+0      	; 0x2ae0 <MDIO_ErrorS_EnablePinPullUp+0x6>
    2ae0:	00 d0       	rcall	.+0      	; 0x2ae2 <MDIO_ErrorS_EnablePinPullUp+0x8>
    2ae2:	0f 92       	push	r0
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
    2ae8:	8a 83       	std	Y+2, r24	; 0x02
    2aea:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    2aec:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin > 7){
    2aee:	8b 81       	ldd	r24, Y+3	; 0x03
    2af0:	88 30       	cpi	r24, 0x08	; 8
    2af2:	10 f0       	brcs	.+4      	; 0x2af8 <MDIO_ErrorS_EnablePinPullUp+0x1e>
		errorState = return_Nok;
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	89 83       	std	Y+1, r24	; 0x01
	}

	SFIOR &= ~(1<<2);
    2af8:	a0 e5       	ldi	r26, 0x50	; 80
    2afa:	b0 e0       	ldi	r27, 0x00	; 0
    2afc:	e0 e5       	ldi	r30, 0x50	; 80
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	80 81       	ld	r24, Z
    2b02:	8b 7f       	andi	r24, 0xFB	; 251
    2b04:	8c 93       	st	X, r24
	switch (Copy_u8Port){
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	28 2f       	mov	r18, r24
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	3d 83       	std	Y+5, r19	; 0x05
    2b0e:	2c 83       	std	Y+4, r18	; 0x04
    2b10:	8c 81       	ldd	r24, Y+4	; 0x04
    2b12:	9d 81       	ldd	r25, Y+5	; 0x05
    2b14:	82 30       	cpi	r24, 0x02	; 2
    2b16:	91 05       	cpc	r25, r1
    2b18:	51 f1       	breq	.+84     	; 0x2b6e <MDIO_ErrorS_EnablePinPullUp+0x94>
    2b1a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b1c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b1e:	23 30       	cpi	r18, 0x03	; 3
    2b20:	31 05       	cpc	r19, r1
    2b22:	34 f4       	brge	.+12     	; 0x2b30 <MDIO_ErrorS_EnablePinPullUp+0x56>
    2b24:	8c 81       	ldd	r24, Y+4	; 0x04
    2b26:	9d 81       	ldd	r25, Y+5	; 0x05
    2b28:	81 30       	cpi	r24, 0x01	; 1
    2b2a:	91 05       	cpc	r25, r1
    2b2c:	61 f0       	breq	.+24     	; 0x2b46 <MDIO_ErrorS_EnablePinPullUp+0x6c>
    2b2e:	5b c0       	rjmp	.+182    	; 0x2be6 <MDIO_ErrorS_EnablePinPullUp+0x10c>
    2b30:	2c 81       	ldd	r18, Y+4	; 0x04
    2b32:	3d 81       	ldd	r19, Y+5	; 0x05
    2b34:	23 30       	cpi	r18, 0x03	; 3
    2b36:	31 05       	cpc	r19, r1
    2b38:	71 f1       	breq	.+92     	; 0x2b96 <MDIO_ErrorS_EnablePinPullUp+0xbc>
    2b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b3c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b3e:	84 30       	cpi	r24, 0x04	; 4
    2b40:	91 05       	cpc	r25, r1
    2b42:	e9 f1       	breq	.+122    	; 0x2bbe <MDIO_ErrorS_EnablePinPullUp+0xe4>
    2b44:	50 c0       	rjmp	.+160    	; 0x2be6 <MDIO_ErrorS_EnablePinPullUp+0x10c>
					case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin);break;
    2b46:	ab e3       	ldi	r26, 0x3B	; 59
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	eb e3       	ldi	r30, 0x3B	; 59
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	48 2f       	mov	r20, r24
    2b52:	8b 81       	ldd	r24, Y+3	; 0x03
    2b54:	28 2f       	mov	r18, r24
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	02 2e       	mov	r0, r18
    2b5e:	02 c0       	rjmp	.+4      	; 0x2b64 <MDIO_ErrorS_EnablePinPullUp+0x8a>
    2b60:	88 0f       	add	r24, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	0a 94       	dec	r0
    2b66:	e2 f7       	brpl	.-8      	; 0x2b60 <MDIO_ErrorS_EnablePinPullUp+0x86>
    2b68:	84 2b       	or	r24, r20
    2b6a:	8c 93       	st	X, r24
    2b6c:	3e c0       	rjmp	.+124    	; 0x2bea <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin);break;
    2b6e:	a8 e3       	ldi	r26, 0x38	; 56
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	e8 e3       	ldi	r30, 0x38	; 56
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	48 2f       	mov	r20, r24
    2b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7c:	28 2f       	mov	r18, r24
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	02 2e       	mov	r0, r18
    2b86:	02 c0       	rjmp	.+4      	; 0x2b8c <MDIO_ErrorS_EnablePinPullUp+0xb2>
    2b88:	88 0f       	add	r24, r24
    2b8a:	99 1f       	adc	r25, r25
    2b8c:	0a 94       	dec	r0
    2b8e:	e2 f7       	brpl	.-8      	; 0x2b88 <MDIO_ErrorS_EnablePinPullUp+0xae>
    2b90:	84 2b       	or	r24, r20
    2b92:	8c 93       	st	X, r24
    2b94:	2a c0       	rjmp	.+84     	; 0x2bea <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin);break;
    2b96:	a5 e3       	ldi	r26, 0x35	; 53
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	e5 e3       	ldi	r30, 0x35	; 53
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	48 2f       	mov	r20, r24
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	28 2f       	mov	r18, r24
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	02 2e       	mov	r0, r18
    2bae:	02 c0       	rjmp	.+4      	; 0x2bb4 <MDIO_ErrorS_EnablePinPullUp+0xda>
    2bb0:	88 0f       	add	r24, r24
    2bb2:	99 1f       	adc	r25, r25
    2bb4:	0a 94       	dec	r0
    2bb6:	e2 f7       	brpl	.-8      	; 0x2bb0 <MDIO_ErrorS_EnablePinPullUp+0xd6>
    2bb8:	84 2b       	or	r24, r20
    2bba:	8c 93       	st	X, r24
    2bbc:	16 c0       	rjmp	.+44     	; 0x2bea <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin);break;
    2bbe:	a2 e3       	ldi	r26, 0x32	; 50
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	e2 e3       	ldi	r30, 0x32	; 50
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	48 2f       	mov	r20, r24
    2bca:	8b 81       	ldd	r24, Y+3	; 0x03
    2bcc:	28 2f       	mov	r18, r24
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	02 2e       	mov	r0, r18
    2bd6:	02 c0       	rjmp	.+4      	; 0x2bdc <MDIO_ErrorS_EnablePinPullUp+0x102>
    2bd8:	88 0f       	add	r24, r24
    2bda:	99 1f       	adc	r25, r25
    2bdc:	0a 94       	dec	r0
    2bde:	e2 f7       	brpl	.-8      	; 0x2bd8 <MDIO_ErrorS_EnablePinPullUp+0xfe>
    2be0:	84 2b       	or	r24, r20
    2be2:	8c 93       	st	X, r24
    2be4:	02 c0       	rjmp	.+4      	; 0x2bea <MDIO_ErrorS_EnablePinPullUp+0x110>
					default: errorState = return_Nok; break;
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	89 83       	std	Y+1, r24	; 0x01
				}
	return errorState;
    2bea:	89 81       	ldd	r24, Y+1	; 0x01

}
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	08 95       	ret

00002bfc <MDIO_voidSetPinDirection>:

void MDIO_voidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8  Copy_U8Mode ){
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	27 97       	sbiw	r28, 0x07	; 7
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	f8 94       	cli
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	cd bf       	out	0x3d, r28	; 61
    2c10:	89 83       	std	Y+1, r24	; 0x01
    2c12:	6a 83       	std	Y+2, r22	; 0x02
    2c14:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_U8Mode == DIO_INPUT){
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	88 23       	and	r24, r24
    2c1a:	09 f0       	breq	.+2      	; 0x2c1e <MDIO_voidSetPinDirection+0x22>
    2c1c:	75 c0       	rjmp	.+234    	; 0x2d08 <MDIO_voidSetPinDirection+0x10c>
			switch (Copy_u8Port){
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	28 2f       	mov	r18, r24
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	3f 83       	std	Y+7, r19	; 0x07
    2c26:	2e 83       	std	Y+6, r18	; 0x06
    2c28:	8e 81       	ldd	r24, Y+6	; 0x06
    2c2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c2c:	82 30       	cpi	r24, 0x02	; 2
    2c2e:	91 05       	cpc	r25, r1
    2c30:	61 f1       	breq	.+88     	; 0x2c8a <MDIO_voidSetPinDirection+0x8e>
    2c32:	2e 81       	ldd	r18, Y+6	; 0x06
    2c34:	3f 81       	ldd	r19, Y+7	; 0x07
    2c36:	23 30       	cpi	r18, 0x03	; 3
    2c38:	31 05       	cpc	r19, r1
    2c3a:	34 f4       	brge	.+12     	; 0x2c48 <MDIO_voidSetPinDirection+0x4c>
    2c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c3e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c40:	81 30       	cpi	r24, 0x01	; 1
    2c42:	91 05       	cpc	r25, r1
    2c44:	69 f0       	breq	.+26     	; 0x2c60 <MDIO_voidSetPinDirection+0x64>
    2c46:	d3 c0       	rjmp	.+422    	; 0x2dee <MDIO_voidSetPinDirection+0x1f2>
    2c48:	2e 81       	ldd	r18, Y+6	; 0x06
    2c4a:	3f 81       	ldd	r19, Y+7	; 0x07
    2c4c:	23 30       	cpi	r18, 0x03	; 3
    2c4e:	31 05       	cpc	r19, r1
    2c50:	89 f1       	breq	.+98     	; 0x2cb4 <MDIO_voidSetPinDirection+0xb8>
    2c52:	8e 81       	ldd	r24, Y+6	; 0x06
    2c54:	9f 81       	ldd	r25, Y+7	; 0x07
    2c56:	84 30       	cpi	r24, 0x04	; 4
    2c58:	91 05       	cpc	r25, r1
    2c5a:	09 f4       	brne	.+2      	; 0x2c5e <MDIO_voidSetPinDirection+0x62>
    2c5c:	40 c0       	rjmp	.+128    	; 0x2cde <MDIO_voidSetPinDirection+0xe2>
    2c5e:	c7 c0       	rjmp	.+398    	; 0x2dee <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTA : CLR_BIT(DDRA,Copy_u8Pin);break;
    2c60:	aa e3       	ldi	r26, 0x3A	; 58
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	ea e3       	ldi	r30, 0x3A	; 58
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	48 2f       	mov	r20, r24
    2c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6e:	28 2f       	mov	r18, r24
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	02 2e       	mov	r0, r18
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <MDIO_voidSetPinDirection+0x82>
    2c7a:	88 0f       	add	r24, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	0a 94       	dec	r0
    2c80:	e2 f7       	brpl	.-8      	; 0x2c7a <MDIO_voidSetPinDirection+0x7e>
    2c82:	80 95       	com	r24
    2c84:	84 23       	and	r24, r20
    2c86:	8c 93       	st	X, r24
    2c88:	b2 c0       	rjmp	.+356    	; 0x2dee <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTB : CLR_BIT(DDRB,Copy_u8Pin);break;
    2c8a:	a7 e3       	ldi	r26, 0x37	; 55
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	e7 e3       	ldi	r30, 0x37	; 55
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
    2c94:	48 2f       	mov	r20, r24
    2c96:	8a 81       	ldd	r24, Y+2	; 0x02
    2c98:	28 2f       	mov	r18, r24
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	02 2e       	mov	r0, r18
    2ca2:	02 c0       	rjmp	.+4      	; 0x2ca8 <MDIO_voidSetPinDirection+0xac>
    2ca4:	88 0f       	add	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	0a 94       	dec	r0
    2caa:	e2 f7       	brpl	.-8      	; 0x2ca4 <MDIO_voidSetPinDirection+0xa8>
    2cac:	80 95       	com	r24
    2cae:	84 23       	and	r24, r20
    2cb0:	8c 93       	st	X, r24
    2cb2:	9d c0       	rjmp	.+314    	; 0x2dee <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTC : CLR_BIT(DDRC,Copy_u8Pin);break;
    2cb4:	a4 e3       	ldi	r26, 0x34	; 52
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	e4 e3       	ldi	r30, 0x34	; 52
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	48 2f       	mov	r20, r24
    2cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc2:	28 2f       	mov	r18, r24
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	02 2e       	mov	r0, r18
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <MDIO_voidSetPinDirection+0xd6>
    2cce:	88 0f       	add	r24, r24
    2cd0:	99 1f       	adc	r25, r25
    2cd2:	0a 94       	dec	r0
    2cd4:	e2 f7       	brpl	.-8      	; 0x2cce <MDIO_voidSetPinDirection+0xd2>
    2cd6:	80 95       	com	r24
    2cd8:	84 23       	and	r24, r20
    2cda:	8c 93       	st	X, r24
    2cdc:	88 c0       	rjmp	.+272    	; 0x2dee <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTD : CLR_BIT(DDRD,Copy_u8Pin);break;
    2cde:	a1 e3       	ldi	r26, 0x31	; 49
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	e1 e3       	ldi	r30, 0x31	; 49
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	48 2f       	mov	r20, r24
    2cea:	8a 81       	ldd	r24, Y+2	; 0x02
    2cec:	28 2f       	mov	r18, r24
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	02 2e       	mov	r0, r18
    2cf6:	02 c0       	rjmp	.+4      	; 0x2cfc <MDIO_voidSetPinDirection+0x100>
    2cf8:	88 0f       	add	r24, r24
    2cfa:	99 1f       	adc	r25, r25
    2cfc:	0a 94       	dec	r0
    2cfe:	e2 f7       	brpl	.-8      	; 0x2cf8 <MDIO_voidSetPinDirection+0xfc>
    2d00:	80 95       	com	r24
    2d02:	84 23       	and	r24, r20
    2d04:	8c 93       	st	X, r24
    2d06:	73 c0       	rjmp	.+230    	; 0x2dee <MDIO_voidSetPinDirection+0x1f2>
				default: break;
			}

	}
	else if(Copy_U8Mode == DIO_OUTPUT){
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	81 30       	cpi	r24, 0x01	; 1
    2d0c:	09 f0       	breq	.+2      	; 0x2d10 <MDIO_voidSetPinDirection+0x114>
    2d0e:	6f c0       	rjmp	.+222    	; 0x2dee <MDIO_voidSetPinDirection+0x1f2>
			switch (Copy_u8Port){
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	28 2f       	mov	r18, r24
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	3d 83       	std	Y+5, r19	; 0x05
    2d18:	2c 83       	std	Y+4, r18	; 0x04
    2d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d1e:	82 30       	cpi	r24, 0x02	; 2
    2d20:	91 05       	cpc	r25, r1
    2d22:	51 f1       	breq	.+84     	; 0x2d78 <MDIO_voidSetPinDirection+0x17c>
    2d24:	2c 81       	ldd	r18, Y+4	; 0x04
    2d26:	3d 81       	ldd	r19, Y+5	; 0x05
    2d28:	23 30       	cpi	r18, 0x03	; 3
    2d2a:	31 05       	cpc	r19, r1
    2d2c:	34 f4       	brge	.+12     	; 0x2d3a <MDIO_voidSetPinDirection+0x13e>
    2d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d30:	9d 81       	ldd	r25, Y+5	; 0x05
    2d32:	81 30       	cpi	r24, 0x01	; 1
    2d34:	91 05       	cpc	r25, r1
    2d36:	61 f0       	breq	.+24     	; 0x2d50 <MDIO_voidSetPinDirection+0x154>
    2d38:	5a c0       	rjmp	.+180    	; 0x2dee <MDIO_voidSetPinDirection+0x1f2>
    2d3a:	2c 81       	ldd	r18, Y+4	; 0x04
    2d3c:	3d 81       	ldd	r19, Y+5	; 0x05
    2d3e:	23 30       	cpi	r18, 0x03	; 3
    2d40:	31 05       	cpc	r19, r1
    2d42:	71 f1       	breq	.+92     	; 0x2da0 <MDIO_voidSetPinDirection+0x1a4>
    2d44:	8c 81       	ldd	r24, Y+4	; 0x04
    2d46:	9d 81       	ldd	r25, Y+5	; 0x05
    2d48:	84 30       	cpi	r24, 0x04	; 4
    2d4a:	91 05       	cpc	r25, r1
    2d4c:	e9 f1       	breq	.+122    	; 0x2dc8 <MDIO_voidSetPinDirection+0x1cc>
    2d4e:	4f c0       	rjmp	.+158    	; 0x2dee <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTA : SET_BIT(DDRA,Copy_u8Pin);break;
    2d50:	aa e3       	ldi	r26, 0x3A	; 58
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	ea e3       	ldi	r30, 0x3A	; 58
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	48 2f       	mov	r20, r24
    2d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5e:	28 2f       	mov	r18, r24
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	02 2e       	mov	r0, r18
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <MDIO_voidSetPinDirection+0x172>
    2d6a:	88 0f       	add	r24, r24
    2d6c:	99 1f       	adc	r25, r25
    2d6e:	0a 94       	dec	r0
    2d70:	e2 f7       	brpl	.-8      	; 0x2d6a <MDIO_voidSetPinDirection+0x16e>
    2d72:	84 2b       	or	r24, r20
    2d74:	8c 93       	st	X, r24
    2d76:	3b c0       	rjmp	.+118    	; 0x2dee <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTB : SET_BIT(DDRB,Copy_u8Pin);break;
    2d78:	a7 e3       	ldi	r26, 0x37	; 55
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	e7 e3       	ldi	r30, 0x37	; 55
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	48 2f       	mov	r20, r24
    2d84:	8a 81       	ldd	r24, Y+2	; 0x02
    2d86:	28 2f       	mov	r18, r24
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	02 2e       	mov	r0, r18
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <MDIO_voidSetPinDirection+0x19a>
    2d92:	88 0f       	add	r24, r24
    2d94:	99 1f       	adc	r25, r25
    2d96:	0a 94       	dec	r0
    2d98:	e2 f7       	brpl	.-8      	; 0x2d92 <MDIO_voidSetPinDirection+0x196>
    2d9a:	84 2b       	or	r24, r20
    2d9c:	8c 93       	st	X, r24
    2d9e:	27 c0       	rjmp	.+78     	; 0x2dee <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTC : SET_BIT(DDRC,Copy_u8Pin);break;
    2da0:	a4 e3       	ldi	r26, 0x34	; 52
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	e4 e3       	ldi	r30, 0x34	; 52
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 81       	ld	r24, Z
    2daa:	48 2f       	mov	r20, r24
    2dac:	8a 81       	ldd	r24, Y+2	; 0x02
    2dae:	28 2f       	mov	r18, r24
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	02 2e       	mov	r0, r18
    2db8:	02 c0       	rjmp	.+4      	; 0x2dbe <MDIO_voidSetPinDirection+0x1c2>
    2dba:	88 0f       	add	r24, r24
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	0a 94       	dec	r0
    2dc0:	e2 f7       	brpl	.-8      	; 0x2dba <MDIO_voidSetPinDirection+0x1be>
    2dc2:	84 2b       	or	r24, r20
    2dc4:	8c 93       	st	X, r24
    2dc6:	13 c0       	rjmp	.+38     	; 0x2dee <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTD : SET_BIT(DDRD,Copy_u8Pin);break;
    2dc8:	a1 e3       	ldi	r26, 0x31	; 49
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	e1 e3       	ldi	r30, 0x31	; 49
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 81       	ld	r24, Z
    2dd2:	48 2f       	mov	r20, r24
    2dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd6:	28 2f       	mov	r18, r24
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	02 2e       	mov	r0, r18
    2de0:	02 c0       	rjmp	.+4      	; 0x2de6 <MDIO_voidSetPinDirection+0x1ea>
    2de2:	88 0f       	add	r24, r24
    2de4:	99 1f       	adc	r25, r25
    2de6:	0a 94       	dec	r0
    2de8:	e2 f7       	brpl	.-8      	; 0x2de2 <MDIO_voidSetPinDirection+0x1e6>
    2dea:	84 2b       	or	r24, r20
    2dec:	8c 93       	st	X, r24
				default: break;
			}
	}

}
    2dee:	27 96       	adiw	r28, 0x07	; 7
    2df0:	0f b6       	in	r0, 0x3f	; 63
    2df2:	f8 94       	cli
    2df4:	de bf       	out	0x3e, r29	; 62
    2df6:	0f be       	out	0x3f, r0	; 63
    2df8:	cd bf       	out	0x3d, r28	; 61
    2dfa:	cf 91       	pop	r28
    2dfc:	df 91       	pop	r29
    2dfe:	08 95       	ret

00002e00 <MDIO_ErrorS_SetPinValue>:
Error_State_t MDIO_ErrorS_SetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8  Copy_U8Mode ){
    2e00:	df 93       	push	r29
    2e02:	cf 93       	push	r28
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    2e08:	28 97       	sbiw	r28, 0x08	; 8
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	de bf       	out	0x3e, r29	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	cd bf       	out	0x3d, r28	; 61
    2e14:	8a 83       	std	Y+2, r24	; 0x02
    2e16:	6b 83       	std	Y+3, r22	; 0x03
    2e18:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t errorState = return_Ok;
    2e1a:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin > 7){
    2e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1e:	88 30       	cpi	r24, 0x08	; 8
    2e20:	10 f0       	brcs	.+4      	; 0x2e26 <MDIO_ErrorS_SetPinValue+0x26>
		errorState = return_Nok;
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	89 83       	std	Y+1, r24	; 0x01
	}

	if(Copy_U8Mode == DIO_LOW){
    2e26:	8c 81       	ldd	r24, Y+4	; 0x04
    2e28:	88 23       	and	r24, r24
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <MDIO_ErrorS_SetPinValue+0x2e>
    2e2c:	78 c0       	rjmp	.+240    	; 0x2f1e <MDIO_ErrorS_SetPinValue+0x11e>
				switch (Copy_u8Port){
    2e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e30:	28 2f       	mov	r18, r24
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	38 87       	std	Y+8, r19	; 0x08
    2e36:	2f 83       	std	Y+7, r18	; 0x07
    2e38:	8f 81       	ldd	r24, Y+7	; 0x07
    2e3a:	98 85       	ldd	r25, Y+8	; 0x08
    2e3c:	82 30       	cpi	r24, 0x02	; 2
    2e3e:	91 05       	cpc	r25, r1
    2e40:	61 f1       	breq	.+88     	; 0x2e9a <MDIO_ErrorS_SetPinValue+0x9a>
    2e42:	2f 81       	ldd	r18, Y+7	; 0x07
    2e44:	38 85       	ldd	r19, Y+8	; 0x08
    2e46:	23 30       	cpi	r18, 0x03	; 3
    2e48:	31 05       	cpc	r19, r1
    2e4a:	34 f4       	brge	.+12     	; 0x2e58 <MDIO_ErrorS_SetPinValue+0x58>
    2e4c:	8f 81       	ldd	r24, Y+7	; 0x07
    2e4e:	98 85       	ldd	r25, Y+8	; 0x08
    2e50:	81 30       	cpi	r24, 0x01	; 1
    2e52:	91 05       	cpc	r25, r1
    2e54:	69 f0       	breq	.+26     	; 0x2e70 <MDIO_ErrorS_SetPinValue+0x70>
    2e56:	60 c0       	rjmp	.+192    	; 0x2f18 <MDIO_ErrorS_SetPinValue+0x118>
    2e58:	2f 81       	ldd	r18, Y+7	; 0x07
    2e5a:	38 85       	ldd	r19, Y+8	; 0x08
    2e5c:	23 30       	cpi	r18, 0x03	; 3
    2e5e:	31 05       	cpc	r19, r1
    2e60:	89 f1       	breq	.+98     	; 0x2ec4 <MDIO_ErrorS_SetPinValue+0xc4>
    2e62:	8f 81       	ldd	r24, Y+7	; 0x07
    2e64:	98 85       	ldd	r25, Y+8	; 0x08
    2e66:	84 30       	cpi	r24, 0x04	; 4
    2e68:	91 05       	cpc	r25, r1
    2e6a:	09 f4       	brne	.+2      	; 0x2e6e <MDIO_ErrorS_SetPinValue+0x6e>
    2e6c:	40 c0       	rjmp	.+128    	; 0x2eee <MDIO_ErrorS_SetPinValue+0xee>
    2e6e:	54 c0       	rjmp	.+168    	; 0x2f18 <MDIO_ErrorS_SetPinValue+0x118>
					case DIO_PORTA : CLR_BIT(PORTA,Copy_u8Pin);break;
    2e70:	ab e3       	ldi	r26, 0x3B	; 59
    2e72:	b0 e0       	ldi	r27, 0x00	; 0
    2e74:	eb e3       	ldi	r30, 0x3B	; 59
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	80 81       	ld	r24, Z
    2e7a:	48 2f       	mov	r20, r24
    2e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7e:	28 2f       	mov	r18, r24
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	02 2e       	mov	r0, r18
    2e88:	02 c0       	rjmp	.+4      	; 0x2e8e <MDIO_ErrorS_SetPinValue+0x8e>
    2e8a:	88 0f       	add	r24, r24
    2e8c:	99 1f       	adc	r25, r25
    2e8e:	0a 94       	dec	r0
    2e90:	e2 f7       	brpl	.-8      	; 0x2e8a <MDIO_ErrorS_SetPinValue+0x8a>
    2e92:	80 95       	com	r24
    2e94:	84 23       	and	r24, r20
    2e96:	8c 93       	st	X, r24
    2e98:	b8 c0       	rjmp	.+368    	; 0x300a <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTB : CLR_BIT(PORTB,Copy_u8Pin);break;
    2e9a:	a8 e3       	ldi	r26, 0x38	; 56
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	e8 e3       	ldi	r30, 0x38	; 56
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	48 2f       	mov	r20, r24
    2ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea8:	28 2f       	mov	r18, r24
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	02 2e       	mov	r0, r18
    2eb2:	02 c0       	rjmp	.+4      	; 0x2eb8 <MDIO_ErrorS_SetPinValue+0xb8>
    2eb4:	88 0f       	add	r24, r24
    2eb6:	99 1f       	adc	r25, r25
    2eb8:	0a 94       	dec	r0
    2eba:	e2 f7       	brpl	.-8      	; 0x2eb4 <MDIO_ErrorS_SetPinValue+0xb4>
    2ebc:	80 95       	com	r24
    2ebe:	84 23       	and	r24, r20
    2ec0:	8c 93       	st	X, r24
    2ec2:	a3 c0       	rjmp	.+326    	; 0x300a <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTC : CLR_BIT(PORTC,Copy_u8Pin);break;
    2ec4:	a5 e3       	ldi	r26, 0x35	; 53
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	e5 e3       	ldi	r30, 0x35	; 53
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	80 81       	ld	r24, Z
    2ece:	48 2f       	mov	r20, r24
    2ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed2:	28 2f       	mov	r18, r24
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	02 2e       	mov	r0, r18
    2edc:	02 c0       	rjmp	.+4      	; 0x2ee2 <MDIO_ErrorS_SetPinValue+0xe2>
    2ede:	88 0f       	add	r24, r24
    2ee0:	99 1f       	adc	r25, r25
    2ee2:	0a 94       	dec	r0
    2ee4:	e2 f7       	brpl	.-8      	; 0x2ede <MDIO_ErrorS_SetPinValue+0xde>
    2ee6:	80 95       	com	r24
    2ee8:	84 23       	and	r24, r20
    2eea:	8c 93       	st	X, r24
    2eec:	8e c0       	rjmp	.+284    	; 0x300a <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTD : CLR_BIT(PORTD,Copy_u8Pin);break;
    2eee:	a2 e3       	ldi	r26, 0x32	; 50
    2ef0:	b0 e0       	ldi	r27, 0x00	; 0
    2ef2:	e2 e3       	ldi	r30, 0x32	; 50
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	80 81       	ld	r24, Z
    2ef8:	48 2f       	mov	r20, r24
    2efa:	8b 81       	ldd	r24, Y+3	; 0x03
    2efc:	28 2f       	mov	r18, r24
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	02 2e       	mov	r0, r18
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <MDIO_ErrorS_SetPinValue+0x10c>
    2f08:	88 0f       	add	r24, r24
    2f0a:	99 1f       	adc	r25, r25
    2f0c:	0a 94       	dec	r0
    2f0e:	e2 f7       	brpl	.-8      	; 0x2f08 <MDIO_ErrorS_SetPinValue+0x108>
    2f10:	80 95       	com	r24
    2f12:	84 23       	and	r24, r20
    2f14:	8c 93       	st	X, r24
    2f16:	79 c0       	rjmp	.+242    	; 0x300a <MDIO_ErrorS_SetPinValue+0x20a>
					default: errorState = return_Nok; break;
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	89 83       	std	Y+1, r24	; 0x01
    2f1c:	76 c0       	rjmp	.+236    	; 0x300a <MDIO_ErrorS_SetPinValue+0x20a>
				}

		}
		else if(Copy_U8Mode == DIO_HIGH){
    2f1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f20:	81 30       	cpi	r24, 0x01	; 1
    2f22:	09 f0       	breq	.+2      	; 0x2f26 <MDIO_ErrorS_SetPinValue+0x126>
    2f24:	72 c0       	rjmp	.+228    	; 0x300a <MDIO_ErrorS_SetPinValue+0x20a>
				switch (Copy_u8Port){
    2f26:	8a 81       	ldd	r24, Y+2	; 0x02
    2f28:	28 2f       	mov	r18, r24
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	3e 83       	std	Y+6, r19	; 0x06
    2f2e:	2d 83       	std	Y+5, r18	; 0x05
    2f30:	8d 81       	ldd	r24, Y+5	; 0x05
    2f32:	9e 81       	ldd	r25, Y+6	; 0x06
    2f34:	82 30       	cpi	r24, 0x02	; 2
    2f36:	91 05       	cpc	r25, r1
    2f38:	51 f1       	breq	.+84     	; 0x2f8e <MDIO_ErrorS_SetPinValue+0x18e>
    2f3a:	2d 81       	ldd	r18, Y+5	; 0x05
    2f3c:	3e 81       	ldd	r19, Y+6	; 0x06
    2f3e:	23 30       	cpi	r18, 0x03	; 3
    2f40:	31 05       	cpc	r19, r1
    2f42:	34 f4       	brge	.+12     	; 0x2f50 <MDIO_ErrorS_SetPinValue+0x150>
    2f44:	8d 81       	ldd	r24, Y+5	; 0x05
    2f46:	9e 81       	ldd	r25, Y+6	; 0x06
    2f48:	81 30       	cpi	r24, 0x01	; 1
    2f4a:	91 05       	cpc	r25, r1
    2f4c:	61 f0       	breq	.+24     	; 0x2f66 <MDIO_ErrorS_SetPinValue+0x166>
    2f4e:	5b c0       	rjmp	.+182    	; 0x3006 <MDIO_ErrorS_SetPinValue+0x206>
    2f50:	2d 81       	ldd	r18, Y+5	; 0x05
    2f52:	3e 81       	ldd	r19, Y+6	; 0x06
    2f54:	23 30       	cpi	r18, 0x03	; 3
    2f56:	31 05       	cpc	r19, r1
    2f58:	71 f1       	breq	.+92     	; 0x2fb6 <MDIO_ErrorS_SetPinValue+0x1b6>
    2f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5e:	84 30       	cpi	r24, 0x04	; 4
    2f60:	91 05       	cpc	r25, r1
    2f62:	e9 f1       	breq	.+122    	; 0x2fde <MDIO_ErrorS_SetPinValue+0x1de>
    2f64:	50 c0       	rjmp	.+160    	; 0x3006 <MDIO_ErrorS_SetPinValue+0x206>
					case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin);break;
    2f66:	ab e3       	ldi	r26, 0x3B	; 59
    2f68:	b0 e0       	ldi	r27, 0x00	; 0
    2f6a:	eb e3       	ldi	r30, 0x3B	; 59
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	80 81       	ld	r24, Z
    2f70:	48 2f       	mov	r20, r24
    2f72:	8b 81       	ldd	r24, Y+3	; 0x03
    2f74:	28 2f       	mov	r18, r24
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	02 2e       	mov	r0, r18
    2f7e:	02 c0       	rjmp	.+4      	; 0x2f84 <MDIO_ErrorS_SetPinValue+0x184>
    2f80:	88 0f       	add	r24, r24
    2f82:	99 1f       	adc	r25, r25
    2f84:	0a 94       	dec	r0
    2f86:	e2 f7       	brpl	.-8      	; 0x2f80 <MDIO_ErrorS_SetPinValue+0x180>
    2f88:	84 2b       	or	r24, r20
    2f8a:	8c 93       	st	X, r24
    2f8c:	3e c0       	rjmp	.+124    	; 0x300a <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin);break;
    2f8e:	a8 e3       	ldi	r26, 0x38	; 56
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	e8 e3       	ldi	r30, 0x38	; 56
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	48 2f       	mov	r20, r24
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	02 2e       	mov	r0, r18
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <MDIO_ErrorS_SetPinValue+0x1ac>
    2fa8:	88 0f       	add	r24, r24
    2faa:	99 1f       	adc	r25, r25
    2fac:	0a 94       	dec	r0
    2fae:	e2 f7       	brpl	.-8      	; 0x2fa8 <MDIO_ErrorS_SetPinValue+0x1a8>
    2fb0:	84 2b       	or	r24, r20
    2fb2:	8c 93       	st	X, r24
    2fb4:	2a c0       	rjmp	.+84     	; 0x300a <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin);break;
    2fb6:	a5 e3       	ldi	r26, 0x35	; 53
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	e5 e3       	ldi	r30, 0x35	; 53
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	80 81       	ld	r24, Z
    2fc0:	48 2f       	mov	r20, r24
    2fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc4:	28 2f       	mov	r18, r24
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	02 2e       	mov	r0, r18
    2fce:	02 c0       	rjmp	.+4      	; 0x2fd4 <MDIO_ErrorS_SetPinValue+0x1d4>
    2fd0:	88 0f       	add	r24, r24
    2fd2:	99 1f       	adc	r25, r25
    2fd4:	0a 94       	dec	r0
    2fd6:	e2 f7       	brpl	.-8      	; 0x2fd0 <MDIO_ErrorS_SetPinValue+0x1d0>
    2fd8:	84 2b       	or	r24, r20
    2fda:	8c 93       	st	X, r24
    2fdc:	16 c0       	rjmp	.+44     	; 0x300a <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin);break;
    2fde:	a2 e3       	ldi	r26, 0x32	; 50
    2fe0:	b0 e0       	ldi	r27, 0x00	; 0
    2fe2:	e2 e3       	ldi	r30, 0x32	; 50
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	80 81       	ld	r24, Z
    2fe8:	48 2f       	mov	r20, r24
    2fea:	8b 81       	ldd	r24, Y+3	; 0x03
    2fec:	28 2f       	mov	r18, r24
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	02 2e       	mov	r0, r18
    2ff6:	02 c0       	rjmp	.+4      	; 0x2ffc <MDIO_ErrorS_SetPinValue+0x1fc>
    2ff8:	88 0f       	add	r24, r24
    2ffa:	99 1f       	adc	r25, r25
    2ffc:	0a 94       	dec	r0
    2ffe:	e2 f7       	brpl	.-8      	; 0x2ff8 <MDIO_ErrorS_SetPinValue+0x1f8>
    3000:	84 2b       	or	r24, r20
    3002:	8c 93       	st	X, r24
    3004:	02 c0       	rjmp	.+4      	; 0x300a <MDIO_ErrorS_SetPinValue+0x20a>
					default:errorState = return_Nok; break;
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	89 83       	std	Y+1, r24	; 0x01
				}
		}
	return errorState;
    300a:	89 81       	ldd	r24, Y+1	; 0x01
}
    300c:	28 96       	adiw	r28, 0x08	; 8
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	cf 91       	pop	r28
    301a:	df 91       	pop	r29
    301c:	08 95       	ret

0000301e <MDIO_ErrorS_GetPinValue>:

Error_State_t MDIO_ErrorS_GetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8* P_u8Value ){
    301e:	df 93       	push	r29
    3020:	cf 93       	push	r28
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
    3026:	27 97       	sbiw	r28, 0x07	; 7
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	8a 83       	std	Y+2, r24	; 0x02
    3034:	6b 83       	std	Y+3, r22	; 0x03
    3036:	5d 83       	std	Y+5, r21	; 0x05
    3038:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t errorState = return_Ok;
    303a:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin > 7){
    303c:	8b 81       	ldd	r24, Y+3	; 0x03
    303e:	88 30       	cpi	r24, 0x08	; 8
    3040:	10 f0       	brcs	.+4      	; 0x3046 <MDIO_ErrorS_GetPinValue+0x28>
			errorState = return_Nok;
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	89 83       	std	Y+1, r24	; 0x01
		}

	switch (Copy_u8Port){
    3046:	8a 81       	ldd	r24, Y+2	; 0x02
    3048:	28 2f       	mov	r18, r24
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	3f 83       	std	Y+7, r19	; 0x07
    304e:	2e 83       	std	Y+6, r18	; 0x06
    3050:	4e 81       	ldd	r20, Y+6	; 0x06
    3052:	5f 81       	ldd	r21, Y+7	; 0x07
    3054:	42 30       	cpi	r20, 0x02	; 2
    3056:	51 05       	cpc	r21, r1
    3058:	59 f1       	breq	.+86     	; 0x30b0 <MDIO_ErrorS_GetPinValue+0x92>
    305a:	8e 81       	ldd	r24, Y+6	; 0x06
    305c:	9f 81       	ldd	r25, Y+7	; 0x07
    305e:	83 30       	cpi	r24, 0x03	; 3
    3060:	91 05       	cpc	r25, r1
    3062:	34 f4       	brge	.+12     	; 0x3070 <MDIO_ErrorS_GetPinValue+0x52>
    3064:	2e 81       	ldd	r18, Y+6	; 0x06
    3066:	3f 81       	ldd	r19, Y+7	; 0x07
    3068:	21 30       	cpi	r18, 0x01	; 1
    306a:	31 05       	cpc	r19, r1
    306c:	69 f0       	breq	.+26     	; 0x3088 <MDIO_ErrorS_GetPinValue+0x6a>
    306e:	5c c0       	rjmp	.+184    	; 0x3128 <MDIO_ErrorS_GetPinValue+0x10a>
    3070:	4e 81       	ldd	r20, Y+6	; 0x06
    3072:	5f 81       	ldd	r21, Y+7	; 0x07
    3074:	43 30       	cpi	r20, 0x03	; 3
    3076:	51 05       	cpc	r21, r1
    3078:	79 f1       	breq	.+94     	; 0x30d8 <MDIO_ErrorS_GetPinValue+0xba>
    307a:	8e 81       	ldd	r24, Y+6	; 0x06
    307c:	9f 81       	ldd	r25, Y+7	; 0x07
    307e:	84 30       	cpi	r24, 0x04	; 4
    3080:	91 05       	cpc	r25, r1
    3082:	09 f4       	brne	.+2      	; 0x3086 <MDIO_ErrorS_GetPinValue+0x68>
    3084:	3d c0       	rjmp	.+122    	; 0x3100 <MDIO_ErrorS_GetPinValue+0xe2>
    3086:	50 c0       	rjmp	.+160    	; 0x3128 <MDIO_ErrorS_GetPinValue+0x10a>
						case DIO_PORTA : *P_u8Value = GET_BIT(PINA,Copy_u8Pin);break;
    3088:	e9 e3       	ldi	r30, 0x39	; 57
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	80 81       	ld	r24, Z
    308e:	28 2f       	mov	r18, r24
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	8b 81       	ldd	r24, Y+3	; 0x03
    3094:	88 2f       	mov	r24, r24
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	a9 01       	movw	r20, r18
    309a:	02 c0       	rjmp	.+4      	; 0x30a0 <MDIO_ErrorS_GetPinValue+0x82>
    309c:	55 95       	asr	r21
    309e:	47 95       	ror	r20
    30a0:	8a 95       	dec	r24
    30a2:	e2 f7       	brpl	.-8      	; 0x309c <MDIO_ErrorS_GetPinValue+0x7e>
    30a4:	ca 01       	movw	r24, r20
    30a6:	81 70       	andi	r24, 0x01	; 1
    30a8:	ec 81       	ldd	r30, Y+4	; 0x04
    30aa:	fd 81       	ldd	r31, Y+5	; 0x05
    30ac:	80 83       	st	Z, r24
    30ae:	3e c0       	rjmp	.+124    	; 0x312c <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTB : *P_u8Value = GET_BIT(PINB,Copy_u8Pin);break;
    30b0:	e6 e3       	ldi	r30, 0x36	; 54
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	80 81       	ld	r24, Z
    30b6:	28 2f       	mov	r18, r24
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	8b 81       	ldd	r24, Y+3	; 0x03
    30bc:	88 2f       	mov	r24, r24
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	a9 01       	movw	r20, r18
    30c2:	02 c0       	rjmp	.+4      	; 0x30c8 <MDIO_ErrorS_GetPinValue+0xaa>
    30c4:	55 95       	asr	r21
    30c6:	47 95       	ror	r20
    30c8:	8a 95       	dec	r24
    30ca:	e2 f7       	brpl	.-8      	; 0x30c4 <MDIO_ErrorS_GetPinValue+0xa6>
    30cc:	ca 01       	movw	r24, r20
    30ce:	81 70       	andi	r24, 0x01	; 1
    30d0:	ec 81       	ldd	r30, Y+4	; 0x04
    30d2:	fd 81       	ldd	r31, Y+5	; 0x05
    30d4:	80 83       	st	Z, r24
    30d6:	2a c0       	rjmp	.+84     	; 0x312c <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTC : *P_u8Value = GET_BIT(PINC,Copy_u8Pin);break;
    30d8:	e3 e3       	ldi	r30, 0x33	; 51
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	80 81       	ld	r24, Z
    30de:	28 2f       	mov	r18, r24
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	8b 81       	ldd	r24, Y+3	; 0x03
    30e4:	88 2f       	mov	r24, r24
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	a9 01       	movw	r20, r18
    30ea:	02 c0       	rjmp	.+4      	; 0x30f0 <MDIO_ErrorS_GetPinValue+0xd2>
    30ec:	55 95       	asr	r21
    30ee:	47 95       	ror	r20
    30f0:	8a 95       	dec	r24
    30f2:	e2 f7       	brpl	.-8      	; 0x30ec <MDIO_ErrorS_GetPinValue+0xce>
    30f4:	ca 01       	movw	r24, r20
    30f6:	81 70       	andi	r24, 0x01	; 1
    30f8:	ec 81       	ldd	r30, Y+4	; 0x04
    30fa:	fd 81       	ldd	r31, Y+5	; 0x05
    30fc:	80 83       	st	Z, r24
    30fe:	16 c0       	rjmp	.+44     	; 0x312c <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTD : *P_u8Value = GET_BIT(PIND,Copy_u8Pin);break;
    3100:	e0 e3       	ldi	r30, 0x30	; 48
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	28 2f       	mov	r18, r24
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	8b 81       	ldd	r24, Y+3	; 0x03
    310c:	88 2f       	mov	r24, r24
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	a9 01       	movw	r20, r18
    3112:	02 c0       	rjmp	.+4      	; 0x3118 <MDIO_ErrorS_GetPinValue+0xfa>
    3114:	55 95       	asr	r21
    3116:	47 95       	ror	r20
    3118:	8a 95       	dec	r24
    311a:	e2 f7       	brpl	.-8      	; 0x3114 <MDIO_ErrorS_GetPinValue+0xf6>
    311c:	ca 01       	movw	r24, r20
    311e:	81 70       	andi	r24, 0x01	; 1
    3120:	ec 81       	ldd	r30, Y+4	; 0x04
    3122:	fd 81       	ldd	r31, Y+5	; 0x05
    3124:	80 83       	st	Z, r24
    3126:	02 c0       	rjmp	.+4      	; 0x312c <MDIO_ErrorS_GetPinValue+0x10e>
						default: errorState = return_Nok; break;
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	89 83       	std	Y+1, r24	; 0x01
					}
	return errorState;
    312c:	89 81       	ldd	r24, Y+1	; 0x01

}
    312e:	27 96       	adiw	r28, 0x07	; 7
    3130:	0f b6       	in	r0, 0x3f	; 63
    3132:	f8 94       	cli
    3134:	de bf       	out	0x3e, r29	; 62
    3136:	0f be       	out	0x3f, r0	; 63
    3138:	cd bf       	out	0x3d, r28	; 61
    313a:	cf 91       	pop	r28
    313c:	df 91       	pop	r29
    313e:	08 95       	ret

00003140 <MDIO_ErrorS_SetPortValue>:

Error_State_t MDIO_ErrorS_SetPortValue( u8 Copy_u8Port , u8  Copy_U8Value ){
    3140:	df 93       	push	r29
    3142:	cf 93       	push	r28
    3144:	00 d0       	rcall	.+0      	; 0x3146 <MDIO_ErrorS_SetPortValue+0x6>
    3146:	00 d0       	rcall	.+0      	; 0x3148 <MDIO_ErrorS_SetPortValue+0x8>
    3148:	0f 92       	push	r0
    314a:	cd b7       	in	r28, 0x3d	; 61
    314c:	de b7       	in	r29, 0x3e	; 62
    314e:	8a 83       	std	Y+2, r24	; 0x02
    3150:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    3152:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
    3154:	8a 81       	ldd	r24, Y+2	; 0x02
    3156:	28 2f       	mov	r18, r24
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	3d 83       	std	Y+5, r19	; 0x05
    315c:	2c 83       	std	Y+4, r18	; 0x04
    315e:	8c 81       	ldd	r24, Y+4	; 0x04
    3160:	9d 81       	ldd	r25, Y+5	; 0x05
    3162:	82 30       	cpi	r24, 0x02	; 2
    3164:	91 05       	cpc	r25, r1
    3166:	d9 f0       	breq	.+54     	; 0x319e <MDIO_ErrorS_SetPortValue+0x5e>
    3168:	2c 81       	ldd	r18, Y+4	; 0x04
    316a:	3d 81       	ldd	r19, Y+5	; 0x05
    316c:	23 30       	cpi	r18, 0x03	; 3
    316e:	31 05       	cpc	r19, r1
    3170:	34 f4       	brge	.+12     	; 0x317e <MDIO_ErrorS_SetPortValue+0x3e>
    3172:	8c 81       	ldd	r24, Y+4	; 0x04
    3174:	9d 81       	ldd	r25, Y+5	; 0x05
    3176:	81 30       	cpi	r24, 0x01	; 1
    3178:	91 05       	cpc	r25, r1
    317a:	61 f0       	breq	.+24     	; 0x3194 <MDIO_ErrorS_SetPortValue+0x54>
    317c:	1f c0       	rjmp	.+62     	; 0x31bc <MDIO_ErrorS_SetPortValue+0x7c>
    317e:	2c 81       	ldd	r18, Y+4	; 0x04
    3180:	3d 81       	ldd	r19, Y+5	; 0x05
    3182:	23 30       	cpi	r18, 0x03	; 3
    3184:	31 05       	cpc	r19, r1
    3186:	81 f0       	breq	.+32     	; 0x31a8 <MDIO_ErrorS_SetPortValue+0x68>
    3188:	8c 81       	ldd	r24, Y+4	; 0x04
    318a:	9d 81       	ldd	r25, Y+5	; 0x05
    318c:	84 30       	cpi	r24, 0x04	; 4
    318e:	91 05       	cpc	r25, r1
    3190:	81 f0       	breq	.+32     	; 0x31b2 <MDIO_ErrorS_SetPortValue+0x72>
    3192:	14 c0       	rjmp	.+40     	; 0x31bc <MDIO_ErrorS_SetPortValue+0x7c>
		case DIO_PORTA : PORTA = Copy_U8Value ;break;
    3194:	eb e3       	ldi	r30, 0x3B	; 59
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	8b 81       	ldd	r24, Y+3	; 0x03
    319a:	80 83       	st	Z, r24
    319c:	11 c0       	rjmp	.+34     	; 0x31c0 <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTB : PORTB = Copy_U8Value ;break;
    319e:	e8 e3       	ldi	r30, 0x38	; 56
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	8b 81       	ldd	r24, Y+3	; 0x03
    31a4:	80 83       	st	Z, r24
    31a6:	0c c0       	rjmp	.+24     	; 0x31c0 <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTC : PORTC = Copy_U8Value ;break;
    31a8:	e5 e3       	ldi	r30, 0x35	; 53
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	8b 81       	ldd	r24, Y+3	; 0x03
    31ae:	80 83       	st	Z, r24
    31b0:	07 c0       	rjmp	.+14     	; 0x31c0 <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTD : PORTD = Copy_U8Value ;break;
    31b2:	e2 e3       	ldi	r30, 0x32	; 50
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	8b 81       	ldd	r24, Y+3	; 0x03
    31b8:	80 83       	st	Z, r24
    31ba:	02 c0       	rjmp	.+4      	; 0x31c0 <MDIO_ErrorS_SetPortValue+0x80>
		default:errorState = return_Nok; break;
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	89 83       	std	Y+1, r24	; 0x01
	}

		return errorState;
    31c0:	89 81       	ldd	r24, Y+1	; 0x01


}
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	0f 90       	pop	r0
    31c8:	0f 90       	pop	r0
    31ca:	0f 90       	pop	r0
    31cc:	cf 91       	pop	r28
    31ce:	df 91       	pop	r29
    31d0:	08 95       	ret

000031d2 <MDIO_ErrorS_GetPortValue>:
Error_State_t MDIO_ErrorS_GetPortValue( u8 Copy_u8Port , u8* P_u8Value ){
    31d2:	df 93       	push	r29
    31d4:	cf 93       	push	r28
    31d6:	00 d0       	rcall	.+0      	; 0x31d8 <MDIO_ErrorS_GetPortValue+0x6>
    31d8:	00 d0       	rcall	.+0      	; 0x31da <MDIO_ErrorS_GetPortValue+0x8>
    31da:	00 d0       	rcall	.+0      	; 0x31dc <MDIO_ErrorS_GetPortValue+0xa>
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	8a 83       	std	Y+2, r24	; 0x02
    31e2:	7c 83       	std	Y+4, r23	; 0x04
    31e4:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    31e6:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
    31e8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ea:	28 2f       	mov	r18, r24
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	3e 83       	std	Y+6, r19	; 0x06
    31f0:	2d 83       	std	Y+5, r18	; 0x05
    31f2:	8d 81       	ldd	r24, Y+5	; 0x05
    31f4:	9e 81       	ldd	r25, Y+6	; 0x06
    31f6:	82 30       	cpi	r24, 0x02	; 2
    31f8:	91 05       	cpc	r25, r1
    31fa:	e9 f0       	breq	.+58     	; 0x3236 <MDIO_ErrorS_GetPortValue+0x64>
    31fc:	2d 81       	ldd	r18, Y+5	; 0x05
    31fe:	3e 81       	ldd	r19, Y+6	; 0x06
    3200:	23 30       	cpi	r18, 0x03	; 3
    3202:	31 05       	cpc	r19, r1
    3204:	34 f4       	brge	.+12     	; 0x3212 <MDIO_ErrorS_GetPortValue+0x40>
    3206:	8d 81       	ldd	r24, Y+5	; 0x05
    3208:	9e 81       	ldd	r25, Y+6	; 0x06
    320a:	81 30       	cpi	r24, 0x01	; 1
    320c:	91 05       	cpc	r25, r1
    320e:	61 f0       	breq	.+24     	; 0x3228 <MDIO_ErrorS_GetPortValue+0x56>
    3210:	27 c0       	rjmp	.+78     	; 0x3260 <MDIO_ErrorS_GetPortValue+0x8e>
    3212:	2d 81       	ldd	r18, Y+5	; 0x05
    3214:	3e 81       	ldd	r19, Y+6	; 0x06
    3216:	23 30       	cpi	r18, 0x03	; 3
    3218:	31 05       	cpc	r19, r1
    321a:	a1 f0       	breq	.+40     	; 0x3244 <MDIO_ErrorS_GetPortValue+0x72>
    321c:	8d 81       	ldd	r24, Y+5	; 0x05
    321e:	9e 81       	ldd	r25, Y+6	; 0x06
    3220:	84 30       	cpi	r24, 0x04	; 4
    3222:	91 05       	cpc	r25, r1
    3224:	b1 f0       	breq	.+44     	; 0x3252 <MDIO_ErrorS_GetPortValue+0x80>
    3226:	1c c0       	rjmp	.+56     	; 0x3260 <MDIO_ErrorS_GetPortValue+0x8e>
		case DIO_PORTA : *P_u8Value = PINA ;break;
    3228:	e9 e3       	ldi	r30, 0x39	; 57
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	80 81       	ld	r24, Z
    322e:	eb 81       	ldd	r30, Y+3	; 0x03
    3230:	fc 81       	ldd	r31, Y+4	; 0x04
    3232:	80 83       	st	Z, r24
    3234:	17 c0       	rjmp	.+46     	; 0x3264 <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTB : *P_u8Value = PINB ;break;
    3236:	e6 e3       	ldi	r30, 0x36	; 54
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	80 81       	ld	r24, Z
    323c:	eb 81       	ldd	r30, Y+3	; 0x03
    323e:	fc 81       	ldd	r31, Y+4	; 0x04
    3240:	80 83       	st	Z, r24
    3242:	10 c0       	rjmp	.+32     	; 0x3264 <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTC : *P_u8Value = PINC ;break;
    3244:	e3 e3       	ldi	r30, 0x33	; 51
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	80 81       	ld	r24, Z
    324a:	eb 81       	ldd	r30, Y+3	; 0x03
    324c:	fc 81       	ldd	r31, Y+4	; 0x04
    324e:	80 83       	st	Z, r24
    3250:	09 c0       	rjmp	.+18     	; 0x3264 <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTD : *P_u8Value = PIND ;break;
    3252:	e0 e3       	ldi	r30, 0x30	; 48
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	80 81       	ld	r24, Z
    3258:	eb 81       	ldd	r30, Y+3	; 0x03
    325a:	fc 81       	ldd	r31, Y+4	; 0x04
    325c:	80 83       	st	Z, r24
    325e:	02 c0       	rjmp	.+4      	; 0x3264 <MDIO_ErrorS_GetPortValue+0x92>
		default: errorState = return_Nok; break;
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	89 83       	std	Y+1, r24	; 0x01
	}
	return errorState;
    3264:	89 81       	ldd	r24, Y+1	; 0x01

}
    3266:	26 96       	adiw	r28, 0x06	; 6
    3268:	0f b6       	in	r0, 0x3f	; 63
    326a:	f8 94       	cli
    326c:	de bf       	out	0x3e, r29	; 62
    326e:	0f be       	out	0x3f, r0	; 63
    3270:	cd bf       	out	0x3d, r28	; 61
    3272:	cf 91       	pop	r28
    3274:	df 91       	pop	r29
    3276:	08 95       	ret

00003278 <MDIO_ErrorS_TogPinValue>:

Error_State_t MDIO_ErrorS_TogPinValue( u8 Copy_u8Port , u8 Copy_u8Pin ){
    3278:	df 93       	push	r29
    327a:	cf 93       	push	r28
    327c:	00 d0       	rcall	.+0      	; 0x327e <MDIO_ErrorS_TogPinValue+0x6>
    327e:	00 d0       	rcall	.+0      	; 0x3280 <MDIO_ErrorS_TogPinValue+0x8>
    3280:	0f 92       	push	r0
    3282:	cd b7       	in	r28, 0x3d	; 61
    3284:	de b7       	in	r29, 0x3e	; 62
    3286:	8a 83       	std	Y+2, r24	; 0x02
    3288:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    328a:	19 82       	std	Y+1, r1	; 0x01
		switch (Copy_u8Port){
    328c:	8a 81       	ldd	r24, Y+2	; 0x02
    328e:	28 2f       	mov	r18, r24
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	3d 83       	std	Y+5, r19	; 0x05
    3294:	2c 83       	std	Y+4, r18	; 0x04
    3296:	8c 81       	ldd	r24, Y+4	; 0x04
    3298:	9d 81       	ldd	r25, Y+5	; 0x05
    329a:	82 30       	cpi	r24, 0x02	; 2
    329c:	91 05       	cpc	r25, r1
    329e:	51 f1       	breq	.+84     	; 0x32f4 <MDIO_ErrorS_TogPinValue+0x7c>
    32a0:	2c 81       	ldd	r18, Y+4	; 0x04
    32a2:	3d 81       	ldd	r19, Y+5	; 0x05
    32a4:	23 30       	cpi	r18, 0x03	; 3
    32a6:	31 05       	cpc	r19, r1
    32a8:	34 f4       	brge	.+12     	; 0x32b6 <MDIO_ErrorS_TogPinValue+0x3e>
    32aa:	8c 81       	ldd	r24, Y+4	; 0x04
    32ac:	9d 81       	ldd	r25, Y+5	; 0x05
    32ae:	81 30       	cpi	r24, 0x01	; 1
    32b0:	91 05       	cpc	r25, r1
    32b2:	61 f0       	breq	.+24     	; 0x32cc <MDIO_ErrorS_TogPinValue+0x54>
    32b4:	5b c0       	rjmp	.+182    	; 0x336c <MDIO_ErrorS_TogPinValue+0xf4>
    32b6:	2c 81       	ldd	r18, Y+4	; 0x04
    32b8:	3d 81       	ldd	r19, Y+5	; 0x05
    32ba:	23 30       	cpi	r18, 0x03	; 3
    32bc:	31 05       	cpc	r19, r1
    32be:	71 f1       	breq	.+92     	; 0x331c <MDIO_ErrorS_TogPinValue+0xa4>
    32c0:	8c 81       	ldd	r24, Y+4	; 0x04
    32c2:	9d 81       	ldd	r25, Y+5	; 0x05
    32c4:	84 30       	cpi	r24, 0x04	; 4
    32c6:	91 05       	cpc	r25, r1
    32c8:	e9 f1       	breq	.+122    	; 0x3344 <MDIO_ErrorS_TogPinValue+0xcc>
    32ca:	50 c0       	rjmp	.+160    	; 0x336c <MDIO_ErrorS_TogPinValue+0xf4>
			case DIO_PORTA :  TOGGLE_BIT(PORTA,Copy_u8Pin) ; break;
    32cc:	ab e3       	ldi	r26, 0x3B	; 59
    32ce:	b0 e0       	ldi	r27, 0x00	; 0
    32d0:	eb e3       	ldi	r30, 0x3B	; 59
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	48 2f       	mov	r20, r24
    32d8:	8b 81       	ldd	r24, Y+3	; 0x03
    32da:	28 2f       	mov	r18, r24
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	02 2e       	mov	r0, r18
    32e4:	02 c0       	rjmp	.+4      	; 0x32ea <MDIO_ErrorS_TogPinValue+0x72>
    32e6:	88 0f       	add	r24, r24
    32e8:	99 1f       	adc	r25, r25
    32ea:	0a 94       	dec	r0
    32ec:	e2 f7       	brpl	.-8      	; 0x32e6 <MDIO_ErrorS_TogPinValue+0x6e>
    32ee:	84 27       	eor	r24, r20
    32f0:	8c 93       	st	X, r24
    32f2:	3e c0       	rjmp	.+124    	; 0x3370 <MDIO_ErrorS_TogPinValue+0xf8>
			case DIO_PORTB :  TOGGLE_BIT(PORTB,Copy_u8Pin) ;break;
    32f4:	a8 e3       	ldi	r26, 0x38	; 56
    32f6:	b0 e0       	ldi	r27, 0x00	; 0
    32f8:	e8 e3       	ldi	r30, 0x38	; 56
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	80 81       	ld	r24, Z
    32fe:	48 2f       	mov	r20, r24
    3300:	8b 81       	ldd	r24, Y+3	; 0x03
    3302:	28 2f       	mov	r18, r24
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	02 2e       	mov	r0, r18
    330c:	02 c0       	rjmp	.+4      	; 0x3312 <MDIO_ErrorS_TogPinValue+0x9a>
    330e:	88 0f       	add	r24, r24
    3310:	99 1f       	adc	r25, r25
    3312:	0a 94       	dec	r0
    3314:	e2 f7       	brpl	.-8      	; 0x330e <MDIO_ErrorS_TogPinValue+0x96>
    3316:	84 27       	eor	r24, r20
    3318:	8c 93       	st	X, r24
    331a:	2a c0       	rjmp	.+84     	; 0x3370 <MDIO_ErrorS_TogPinValue+0xf8>
			case DIO_PORTC :  TOGGLE_BIT(PORTC,Copy_u8Pin) ;break;
    331c:	a5 e3       	ldi	r26, 0x35	; 53
    331e:	b0 e0       	ldi	r27, 0x00	; 0
    3320:	e5 e3       	ldi	r30, 0x35	; 53
    3322:	f0 e0       	ldi	r31, 0x00	; 0
    3324:	80 81       	ld	r24, Z
    3326:	48 2f       	mov	r20, r24
    3328:	8b 81       	ldd	r24, Y+3	; 0x03
    332a:	28 2f       	mov	r18, r24
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	02 2e       	mov	r0, r18
    3334:	02 c0       	rjmp	.+4      	; 0x333a <MDIO_ErrorS_TogPinValue+0xc2>
    3336:	88 0f       	add	r24, r24
    3338:	99 1f       	adc	r25, r25
    333a:	0a 94       	dec	r0
    333c:	e2 f7       	brpl	.-8      	; 0x3336 <MDIO_ErrorS_TogPinValue+0xbe>
    333e:	84 27       	eor	r24, r20
    3340:	8c 93       	st	X, r24
    3342:	16 c0       	rjmp	.+44     	; 0x3370 <MDIO_ErrorS_TogPinValue+0xf8>
			case DIO_PORTD :  TOGGLE_BIT(PORTD,Copy_u8Pin) ;break;
    3344:	a2 e3       	ldi	r26, 0x32	; 50
    3346:	b0 e0       	ldi	r27, 0x00	; 0
    3348:	e2 e3       	ldi	r30, 0x32	; 50
    334a:	f0 e0       	ldi	r31, 0x00	; 0
    334c:	80 81       	ld	r24, Z
    334e:	48 2f       	mov	r20, r24
    3350:	8b 81       	ldd	r24, Y+3	; 0x03
    3352:	28 2f       	mov	r18, r24
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	02 2e       	mov	r0, r18
    335c:	02 c0       	rjmp	.+4      	; 0x3362 <MDIO_ErrorS_TogPinValue+0xea>
    335e:	88 0f       	add	r24, r24
    3360:	99 1f       	adc	r25, r25
    3362:	0a 94       	dec	r0
    3364:	e2 f7       	brpl	.-8      	; 0x335e <MDIO_ErrorS_TogPinValue+0xe6>
    3366:	84 27       	eor	r24, r20
    3368:	8c 93       	st	X, r24
    336a:	02 c0       	rjmp	.+4      	; 0x3370 <MDIO_ErrorS_TogPinValue+0xf8>
			default: errorState = return_Nok; break;
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	89 83       	std	Y+1, r24	; 0x01
		}
		return errorState;
    3370:	89 81       	ldd	r24, Y+1	; 0x01
}
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	0f 90       	pop	r0
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	cf 91       	pop	r28
    337e:	df 91       	pop	r29
    3380:	08 95       	ret

00003382 <main>:
#include "HLCD_interface.h"
#include "util/delay.h"



int main (){
    3382:	df 93       	push	r29
    3384:	cf 93       	push	r28
    3386:	cd b7       	in	r28, 0x3d	; 61
    3388:	de b7       	in	r29, 0x3e	; 62

	Port_voidInit();
    338a:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <Port_voidInit>
	HLCD_voidInit();
    338e:	0e 94 47 06 	call	0xc8e	; 0xc8e <HLCD_voidInit>
	HLCD_voidSendInt(123);
    3392:	6b e7       	ldi	r22, 0x7B	; 123
    3394:	70 e0       	ldi	r23, 0x00	; 0
    3396:	80 e0       	ldi	r24, 0x00	; 0
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <HLCD_voidSendInt>
    339e:	ff cf       	rjmp	.-2      	; 0x339e <main+0x1c>

000033a0 <__prologue_saves__>:
    33a0:	2f 92       	push	r2
    33a2:	3f 92       	push	r3
    33a4:	4f 92       	push	r4
    33a6:	5f 92       	push	r5
    33a8:	6f 92       	push	r6
    33aa:	7f 92       	push	r7
    33ac:	8f 92       	push	r8
    33ae:	9f 92       	push	r9
    33b0:	af 92       	push	r10
    33b2:	bf 92       	push	r11
    33b4:	cf 92       	push	r12
    33b6:	df 92       	push	r13
    33b8:	ef 92       	push	r14
    33ba:	ff 92       	push	r15
    33bc:	0f 93       	push	r16
    33be:	1f 93       	push	r17
    33c0:	cf 93       	push	r28
    33c2:	df 93       	push	r29
    33c4:	cd b7       	in	r28, 0x3d	; 61
    33c6:	de b7       	in	r29, 0x3e	; 62
    33c8:	ca 1b       	sub	r28, r26
    33ca:	db 0b       	sbc	r29, r27
    33cc:	0f b6       	in	r0, 0x3f	; 63
    33ce:	f8 94       	cli
    33d0:	de bf       	out	0x3e, r29	; 62
    33d2:	0f be       	out	0x3f, r0	; 63
    33d4:	cd bf       	out	0x3d, r28	; 61
    33d6:	09 94       	ijmp

000033d8 <__epilogue_restores__>:
    33d8:	2a 88       	ldd	r2, Y+18	; 0x12
    33da:	39 88       	ldd	r3, Y+17	; 0x11
    33dc:	48 88       	ldd	r4, Y+16	; 0x10
    33de:	5f 84       	ldd	r5, Y+15	; 0x0f
    33e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    33e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    33e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    33e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    33e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    33ea:	b9 84       	ldd	r11, Y+9	; 0x09
    33ec:	c8 84       	ldd	r12, Y+8	; 0x08
    33ee:	df 80       	ldd	r13, Y+7	; 0x07
    33f0:	ee 80       	ldd	r14, Y+6	; 0x06
    33f2:	fd 80       	ldd	r15, Y+5	; 0x05
    33f4:	0c 81       	ldd	r16, Y+4	; 0x04
    33f6:	1b 81       	ldd	r17, Y+3	; 0x03
    33f8:	aa 81       	ldd	r26, Y+2	; 0x02
    33fa:	b9 81       	ldd	r27, Y+1	; 0x01
    33fc:	ce 0f       	add	r28, r30
    33fe:	d1 1d       	adc	r29, r1
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	f8 94       	cli
    3404:	de bf       	out	0x3e, r29	; 62
    3406:	0f be       	out	0x3f, r0	; 63
    3408:	cd bf       	out	0x3d, r28	; 61
    340a:	ed 01       	movw	r28, r26
    340c:	08 95       	ret

0000340e <itoa>:
    340e:	fb 01       	movw	r30, r22
    3410:	9f 01       	movw	r18, r30
    3412:	e8 94       	clt
    3414:	42 30       	cpi	r20, 0x02	; 2
    3416:	c4 f0       	brlt	.+48     	; 0x3448 <itoa+0x3a>
    3418:	45 32       	cpi	r20, 0x25	; 37
    341a:	b4 f4       	brge	.+44     	; 0x3448 <itoa+0x3a>
    341c:	4a 30       	cpi	r20, 0x0A	; 10
    341e:	29 f4       	brne	.+10     	; 0x342a <itoa+0x1c>
    3420:	97 fb       	bst	r25, 7
    3422:	1e f4       	brtc	.+6      	; 0x342a <itoa+0x1c>
    3424:	90 95       	com	r25
    3426:	81 95       	neg	r24
    3428:	9f 4f       	sbci	r25, 0xFF	; 255
    342a:	64 2f       	mov	r22, r20
    342c:	77 27       	eor	r23, r23
    342e:	0e 94 38 1a 	call	0x3470	; 0x3470 <__udivmodhi4>
    3432:	80 5d       	subi	r24, 0xD0	; 208
    3434:	8a 33       	cpi	r24, 0x3A	; 58
    3436:	0c f0       	brlt	.+2      	; 0x343a <itoa+0x2c>
    3438:	89 5d       	subi	r24, 0xD9	; 217
    343a:	81 93       	st	Z+, r24
    343c:	cb 01       	movw	r24, r22
    343e:	00 97       	sbiw	r24, 0x00	; 0
    3440:	a1 f7       	brne	.-24     	; 0x342a <itoa+0x1c>
    3442:	16 f4       	brtc	.+4      	; 0x3448 <itoa+0x3a>
    3444:	5d e2       	ldi	r21, 0x2D	; 45
    3446:	51 93       	st	Z+, r21
    3448:	10 82       	st	Z, r1
    344a:	c9 01       	movw	r24, r18
    344c:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <strrev>

00003450 <strrev>:
    3450:	dc 01       	movw	r26, r24
    3452:	fc 01       	movw	r30, r24
    3454:	67 2f       	mov	r22, r23
    3456:	71 91       	ld	r23, Z+
    3458:	77 23       	and	r23, r23
    345a:	e1 f7       	brne	.-8      	; 0x3454 <strrev+0x4>
    345c:	32 97       	sbiw	r30, 0x02	; 2
    345e:	04 c0       	rjmp	.+8      	; 0x3468 <strrev+0x18>
    3460:	7c 91       	ld	r23, X
    3462:	6d 93       	st	X+, r22
    3464:	70 83       	st	Z, r23
    3466:	62 91       	ld	r22, -Z
    3468:	ae 17       	cp	r26, r30
    346a:	bf 07       	cpc	r27, r31
    346c:	c8 f3       	brcs	.-14     	; 0x3460 <strrev+0x10>
    346e:	08 95       	ret

00003470 <__udivmodhi4>:
    3470:	aa 1b       	sub	r26, r26
    3472:	bb 1b       	sub	r27, r27
    3474:	51 e1       	ldi	r21, 0x11	; 17
    3476:	07 c0       	rjmp	.+14     	; 0x3486 <__udivmodhi4_ep>

00003478 <__udivmodhi4_loop>:
    3478:	aa 1f       	adc	r26, r26
    347a:	bb 1f       	adc	r27, r27
    347c:	a6 17       	cp	r26, r22
    347e:	b7 07       	cpc	r27, r23
    3480:	10 f0       	brcs	.+4      	; 0x3486 <__udivmodhi4_ep>
    3482:	a6 1b       	sub	r26, r22
    3484:	b7 0b       	sbc	r27, r23

00003486 <__udivmodhi4_ep>:
    3486:	88 1f       	adc	r24, r24
    3488:	99 1f       	adc	r25, r25
    348a:	5a 95       	dec	r21
    348c:	a9 f7       	brne	.-22     	; 0x3478 <__udivmodhi4_loop>
    348e:	80 95       	com	r24
    3490:	90 95       	com	r25
    3492:	bc 01       	movw	r22, r24
    3494:	cd 01       	movw	r24, r26
    3496:	08 95       	ret

00003498 <_exit>:
    3498:	f8 94       	cli

0000349a <__stop_program>:
    349a:	ff cf       	rjmp	.-2      	; 0x349a <__stop_program>
